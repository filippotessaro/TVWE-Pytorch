{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"FULLY-CONNECTED","provenance":[],"collapsed_sections":["WNdDwRrPX5nj"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"P_FwoC8GviT1","colab_type":"text"},"source":["# WEIGHT ESTIMATION - Research Project"]},{"cell_type":"code","metadata":{"id":"ZxOZswaXv8Pl","colab_type":"code","outputId":"9f0910ac-b20c-4361-cbb5-67bb633b6fd9","executionInfo":{"status":"ok","timestamp":1574843729922,"user_tz":-60,"elapsed":25732,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive',force_remount=True)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qeD00JVfe22S","colab_type":"code","colab":{}},"source":["# import libraries\n","import torch\n","import torchvision\n","import torchvision.transforms as T\n","import torch.nn.functional as F\n","import torch.nn as nn\n","from torch.utils.data import Dataset\n","import pandas as pd\n","import numpy as np\n","from torchvision import datasets\n","from skimage import io, transform\n","from torch.utils.data import DataLoader\n","import time\n","import os\n","#from tensorboardcolab import TensorBoardColab\n","from PIL import Image\n","from torchvision import transforms\n","import logging\n","from datetime import datetime\n","from torch.autograd import Variable\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CUa0-vIv7oET","colab_type":"code","outputId":"c6925c70-6d03-4e6d-f522-3c7abab25225","executionInfo":{"status":"ok","timestamp":1574843734726,"user_tz":-60,"elapsed":2306,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Get the seconds since epoch\n","secondsSinceEpoch = time.time()\n","# Convert seconds since epoch to struct_time\n","timeObj = time.localtime(secondsSinceEpoch)\n","\n","time = str(timeObj.tm_mday)+ '-' + str(timeObj.tm_mon) +'-'+ str(timeObj.tm_year)+'-'+str(timeObj.tm_hour)+'_'+str(timeObj.tm_min)\n","print(time)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["27-11-2019-8_35\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nfO7vaDhwEPk","colab_type":"code","outputId":"39d47f63-cc13-40e7-8115-02a883523aaf","executionInfo":{"status":"ok","timestamp":1574843734727,"user_tz":-60,"elapsed":1971,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Path of Folders\n","content = '/content/drive/My Drive/new-frames/'\n","labels_csv = '/content/drive/My Drive/weights.csv'\n","train_path = content + \"train\"\n","test_path = content + \"test\"\n","validation_path = content + \"validation\"\n","\n","weights=pd.read_csv(labels_csv)\n","weights = weights['WEIGHT'].values\n","\n","print('Start initialization logging file')\n","logging.basicConfig(filename='app_' + time + '.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')\n","logging.warning('Initialized File')\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Start initialization logging file\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"smgrZFOAziOL","colab_type":"code","colab":{}},"source":["# this is one way to define a network\n","class Net(torch.nn.Module):\n","    def __init__(self, n_feature, n_hidden, n_output):\n","        super(Net, self).__init__()\n","        self.hidden = torch.nn.Linear(n_feature, n_hidden)   # hidden layer\n","        self.predict = torch.nn.Linear(n_hidden, n_output)   # output layer\n","\n","    def forward(self, x):\n","        x = F.relu(self.hidden(x))      # activation function for hidden layer\n","        x = self.predict(x)             # linear output\n","        return x\n","\n","#net = Net(n_feature=1, n_hidden=10, n_output=1)     # define the network"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"an7LOPH8SC8W","colab_type":"code","colab":{}},"source":["class Net(nn.Module):\n","    \n","    def __init__(self, n_feature, n_hidden, n_output):\n","        super(Net, self).__init__()\n","        self.l1 = nn.Linear(n_feature, n_hidden)\n","        self.relu = nn.ReLU()\n","        self.l3 = nn.Linear(n_hidden, n_output)\n","        \n","    def forward(self, x):\n","        x = self.l1(x)\n","        x = self.relu(x)\n","        x = self.l3(x)\n","        return x"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MAx0lsewycv1","colab_type":"text"},"source":["## Optimizer and Cost Function\n","Declaration of the optimizer and of the cost function."]},{"cell_type":"code","metadata":{"id":"31jAoGYg3hjK","colab_type":"code","colab":{}},"source":["def get_optimizer(net, lr):\n","  optimizer = torch.optim.Adam(net.parameters(), lr=lr)#, betas=(0.9, 0.999), eps=1e-08, amsgrad=False)\n","  return optimizer\n","\n","def get_cost_function():\n","  cost_function = torch.nn.MSELoss()\n","  return cost_function"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y4ksS3d6_GS9","colab_type":"text"},"source":["## New KFold Cross Validation\n","This is an improvement of the section before since this one creates dinamically the minibatch for the computatation of a single fold\n"]},{"cell_type":"code","metadata":{"id":"lG5kBo8xCZCa","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd\n","import os\n","from sklearn.model_selection import train_test_split\n","\n","weights=pd.read_csv(labels_csv)\n","train_IDs, test_IDs = train_test_split(weights, test_size=0.30, random_state=42)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GBnEJt1XDwCx","colab_type":"code","outputId":"a63886b5-5da4-4e62-f9ae-0b9a035ee6ca","executionInfo":{"status":"ok","timestamp":1574843743287,"user_tz":-60,"elapsed":935,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Check len of IDs\n","print('Train:', len(train_IDs))\n","print('Test:', len(test_IDs))"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Train: 72\n","Test: 31\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"icvCSDSHDLUl","colab_type":"code","colab":{}},"source":["def generateDatasetIDS(list, root_folder = \"/content/drive/My Drive/frames/\"):\n","  \"\"\"\n","  Return a list with all the image paths relative to those IDs\n","  \"\"\"\n","  test_list = []\n","  for id in list:\n","    #print(\"Id:\", id)\n","    for root, dirs, files in os.walk(root_folder + str(id) ):\n","        for filename in files:\n","            #print(\"\\t\", str(id) + \"/\" + filename)\n","            if('.png' in filename):\n","              add_file = str(id) + \"/\" + filename\n","              test_list.append(add_file)\n","  return test_list\n","\n","\n","class CustomListDataset(torch.utils.data.Dataset):\n","\n","    def __init__(self, images_list, df_weights, root_dir,transform = None):\n","        \"\"\"\n","        Args:\n","            images_list(list): list with IDs into the dataset\n","            root_dir(string): directory with all the images\n","            df_weights(pd_dataframe): dataframe with all the weights of the people\n","            transform: trasform operation for images\n","        \"\"\"\n","        self.images_list = images_list\n","        self.root_dir = root_dir\n","        self.df_weights = df_weights\n","        self.df_weights = self.df_weights['WEIGHT'].values\n","        self.transform = transform\n","\n","    def __len__(self):\n","        return len(self.images_list)\n","\n","    def __getitem__(self, idx):\n","        img_name = os.path.join(self.root_dir, self.images_list[idx])\n","        image = Image.open(img_name)\n","        #image = image.convert(mode='RGB')\n","        \n","        if(self.transform is not None):\n","            image = self.transform(image)\n","\n","        frame_name = self.images_list[idx].split(\"/\")\n","        id = int(frame_name[0])\n","        \n","        labels = self.df_weights[id]\n","        labels = np.float(labels)\n","        #print(labels)\n","        #sample = {'image': image, 'labels': labels}\n","        return image, torch.as_tensor(labels)\n","\n","\n","transform = transforms.Compose([\n","    # you can add other transformations in this list\n","    #transforms.Resize((224,224), interpolation=2),\n","    transforms.RandomHorizontalFlip(),\n","    transforms.RandomRotation(20),\n","    transforms.ToTensor()\n","    #,\n","    #transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","])\n","\n","#testDataset = CustomListDataset(images_list = test_list, df_weights = weights,root_dir=\"/content/drive/My Drive/frames/\", transform = transform)\n","#mnistmTrainLoader = torch.utils.data.DataLoader(testDataset,batch_size=16,shuffle=True, num_workers=2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"30k01YQYRQn1","colab_type":"code","colab":{}},"source":["IMAGE_SIZE = 150 * 150\n","IMAGE_WIDTH = IMAGE_HEIGHT = 150\n","\n","class AutoEncoder(nn.Module):\n","    \n","    def __init__(self, code_size):\n","        super().__init__()\n","        self.code_size = code_size\n","        \n","        # Encoder specification\n","        self.enc_cnn_1 = nn.Conv2d(1, 10, kernel_size=5)\n","        self.enc_cnn_2 = nn.Conv2d(10, 20, kernel_size=5)\n","        self.enc_linear_1 = nn.Linear(34 * 34 * 20, 100)\n","        self.enc_linear_12 = nn.Linear(100, 150)\n","        self.enc_linear_2 = nn.Linear(150, self.code_size)\n","        \n","        # Decoder specification\n","        self.dec_linear_1 = nn.Linear(self.code_size, 160)\n","        self.dec_linear_2 = nn.Linear(160, IMAGE_SIZE)\n","        \n","    def forward(self, images):\n","        code = self.encode(images)\n","        out = self.decode(code)\n","        return out, code\n","    \n","    def encode(self, images):\n","        code = self.enc_cnn_1(images)\n","        code = F.selu(F.max_pool2d(code, 2))\n","        \n","        code = self.enc_cnn_2(code)\n","        code = F.selu(F.max_pool2d(code, 2))\n","        #print(\"first \\t\", code.shape)\n","        code = code.view([images.size(0), -1])\n","        #print(\"first \\t\", code.shape)\n","        code = F.selu(self.enc_linear_1(code))\n","        code = F.selu(self.enc_linear_12(code))\n","\n","        code = self.enc_linear_2(code)\n","        return code\n","    \n","    def decode(self, code):\n","        out = F.selu(self.dec_linear_1(code))\n","        out = torch.sigmoid(self.dec_linear_2(out))\n","        out = out.view([code.size(0), 1, IMAGE_WIDTH, IMAGE_HEIGHT])\n","        return out"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WTwbfFh5A9eP","colab_type":"code","outputId":"19cba204-b8c9-49cc-802d-b0b76ce1f3dd","executionInfo":{"status":"ok","timestamp":1574843756835,"user_tz":-60,"elapsed":5741,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import torchvision.models as models\n","autoencoder = AutoEncoder(64)\n","checkpoint = torch.load(\"/content/drive/My Drive/model/autoencoder.pt\")\n","autoencoder.load_state_dict(checkpoint)\n","#feature_extractor = torch.nn.Sequential(*list(model_ft.children())[:-1])\n"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"UgrUvQGv_Xew","colab_type":"code","outputId":"f295f8f8-c733-4136-a30e-1c5cdbad5f21","executionInfo":{"status":"ok","timestamp":1574846171594,"user_tz":-60,"elapsed":2414662,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import copy\n","import time\n","from sklearn.model_selection import KFold\n","from tqdm import tqdm\n","import random\n","\n","def seed_torch(seed=1029):\n","    random.seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.backends.cudnn.deterministic = True\n","\n","seed_torch(123)\n","device='cuda:0'\n","learning_rate = 0.005\n","num_epochs = 50\n","splits = 5\n","batch_size = 64\n","\n","model = Net(n_feature=64, n_hidden=50, n_output=1) \n","\n","optimizer = get_optimizer(model, learning_rate)\n","loss_fn = get_cost_function()\n","\n","kf = KFold(n_splits=splits, shuffle=True)\n","fold = 1\n","\n","autoencoder.cuda()\n","\n","for train_index, test_index in kf.split(train_IDs):\n","  #print(\"TRAIN:\", len(train_index), \"TEST:\", len(test_index))\n","  model.cuda()\n","  #feature_extractor.cuda()\n","  train_images_list = generateDatasetIDS(train_index,\"/content/drive/My Drive/frames/\")\n","  train = CustomListDataset(images_list = train_images_list, df_weights = weights, root_dir=\"/content/drive/My Drive/frames/\", transform = transform)\n","  trainloader = torch.utils.data.DataLoader(train, batch_size=batch_size, shuffle=True, num_workers=1, pin_memory=True)\n","\n","  test_images_list = generateDatasetIDS(test_index,\"/content/drive/My Drive/frames/\")\n","  test = CustomListDataset(images_list = test_images_list, df_weights = weights, root_dir=\"/content/drive/My Drive/frames/\", transform = transform)\n","  validationloader = torch.utils.data.DataLoader(test, batch_size=batch_size, shuffle=False, num_workers=1, pin_memory=True)\n","\n","  print(f'Len Train (in batch): {len(trainloader)}')\n","  print(f'Len validation (in batch): {len(validationloader)}')\n","\n","  print(f'Fold {fold}')\n","  fold += 1\n","\n","  for epoch in range(num_epochs):\n","      start_time = time.time()\n","      \n","      model.train()\n","      avg_loss = 0.\n","      cumulative_loss = 0.\n","      samples = 0\n","      for i, (x_batch, y_batch) in enumerate(trainloader):\n","          x_batch = x_batch.to(device)\n","          #print(x_batch.shape)\n","          #featrues_x = autoencoder.encode(x_batch)\n","          _, featrues_x = autoencoder(Variable(x_batch))\n","          #print(featrues_x.shape)\n","          featrues_x=featrues_x.view(featrues_x.size(0),64)\n","          y_batch = y_batch.to(device)\n","          y_batch = y_batch.view(-1,1)\n","          y_pred = model(featrues_x)\n","          loss = loss_fn(y_pred, y_batch)\n","          optimizer.zero_grad()\n","      \n","          loss.backward()\n","          optimizer.step()\n","          samples+=x_batch.shape[0]\n","          cumulative_loss += loss.item()\n","      avg_loss = cumulative_loss / samples\n","      \n","      model.eval()\n","      avg_val_loss = 0.\n","      cumulative_val_loss = 0.\n","      val_samples = 0\n","      with torch.no_grad():\n","        for i, (x_batch, y_batch) in enumerate(validationloader):\n","            x_batch = x_batch.to(device)\n","            _, featrues_x = autoencoder(Variable(x_batch))\n","            featrues_x=featrues_x.view(featrues_x.size(0),64)\n","\n","            y_batch = y_batch.to(device)\n","            y_batch = y_batch.view(-1,1)\n","            y_pred = model(featrues_x)\n","            cumulative_val_loss += loss_fn(y_pred, y_batch).item()\n","            val_samples += x_batch.shape[0]\n","        avg_val_loss = cumulative_val_loss / val_samples\n","          #valid_preds_fold[i * batch_size:(i+1) * batch_size] = sigmoid(y_pred.cpu().numpy())[:, 0]\n","\n","      elapsed_time = time.time() - start_time \n","      print('Epoch {}/{} \\t loss={:.4f} \\t val_loss={:.4f} \\t time={:.2f}s'.format(\n","          epoch + 1, num_epochs, avg_loss, avg_val_loss, elapsed_time))\n","  \n"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Len Train (in batch): 27\n","Len validation (in batch): 9\n","Fold 1\n","Epoch 1/50 \t loss=37.7022 \t val_loss=6.5269 \t time=1405.84s\n","Epoch 2/50 \t loss=3.8357 \t val_loss=2.3062 \t time=3.88s\n","Epoch 3/50 \t loss=2.3072 \t val_loss=3.2537 \t time=3.89s\n","Epoch 4/50 \t loss=2.2419 \t val_loss=3.2551 \t time=3.86s\n","Epoch 5/50 \t loss=2.2098 \t val_loss=3.1565 \t time=3.90s\n","Epoch 6/50 \t loss=2.2323 \t val_loss=2.9920 \t time=3.87s\n","Epoch 7/50 \t loss=2.2236 \t val_loss=3.0334 \t time=3.85s\n","Epoch 8/50 \t loss=2.2271 \t val_loss=3.4651 \t time=3.90s\n","Epoch 9/50 \t loss=2.2412 \t val_loss=3.2123 \t time=3.86s\n","Epoch 10/50 \t loss=2.2323 \t val_loss=3.0830 \t time=3.90s\n","Epoch 11/50 \t loss=2.2485 \t val_loss=3.2357 \t time=3.85s\n","Epoch 12/50 \t loss=2.2286 \t val_loss=3.4296 \t time=3.86s\n","Epoch 13/50 \t loss=2.2190 \t val_loss=2.9380 \t time=3.80s\n","Epoch 14/50 \t loss=2.1763 \t val_loss=3.0731 \t time=3.85s\n","Epoch 15/50 \t loss=2.1934 \t val_loss=3.2302 \t time=3.80s\n","Epoch 16/50 \t loss=2.1623 \t val_loss=3.1186 \t time=3.90s\n","Epoch 17/50 \t loss=2.1756 \t val_loss=3.3948 \t time=3.99s\n","Epoch 18/50 \t loss=2.1820 \t val_loss=3.0577 \t time=3.90s\n","Epoch 19/50 \t loss=2.1846 \t val_loss=3.1350 \t time=3.90s\n","Epoch 20/50 \t loss=2.1815 \t val_loss=2.8966 \t time=3.76s\n","Epoch 21/50 \t loss=2.1648 \t val_loss=3.0173 \t time=3.88s\n","Epoch 22/50 \t loss=2.1824 \t val_loss=2.9081 \t time=3.86s\n","Epoch 23/50 \t loss=2.1822 \t val_loss=2.9398 \t time=3.79s\n","Epoch 24/50 \t loss=2.1659 \t val_loss=2.7758 \t time=3.98s\n","Epoch 25/50 \t loss=2.1856 \t val_loss=3.1805 \t time=3.84s\n","Epoch 26/50 \t loss=2.1465 \t val_loss=2.9279 \t time=3.81s\n","Epoch 27/50 \t loss=2.1424 \t val_loss=3.1442 \t time=3.94s\n","Epoch 28/50 \t loss=2.1205 \t val_loss=3.1974 \t time=3.80s\n","Epoch 29/50 \t loss=2.1240 \t val_loss=2.8499 \t time=3.97s\n","Epoch 30/50 \t loss=2.1139 \t val_loss=3.0082 \t time=3.84s\n","Epoch 31/50 \t loss=2.1018 \t val_loss=2.9214 \t time=3.91s\n","Epoch 32/50 \t loss=2.1570 \t val_loss=3.0222 \t time=3.84s\n","Epoch 33/50 \t loss=2.1590 \t val_loss=3.0190 \t time=3.85s\n","Epoch 34/50 \t loss=2.1338 \t val_loss=3.0083 \t time=3.88s\n","Epoch 35/50 \t loss=2.0986 \t val_loss=2.9264 \t time=3.85s\n","Epoch 36/50 \t loss=2.0966 \t val_loss=3.2370 \t time=3.91s\n","Epoch 37/50 \t loss=2.0989 \t val_loss=3.3091 \t time=3.87s\n","Epoch 38/50 \t loss=2.1202 \t val_loss=3.1329 \t time=3.97s\n","Epoch 39/50 \t loss=2.1147 \t val_loss=2.8156 \t time=4.22s\n","Epoch 40/50 \t loss=2.1039 \t val_loss=3.0937 \t time=4.06s\n","Epoch 41/50 \t loss=2.0929 \t val_loss=2.9122 \t time=3.89s\n","Epoch 42/50 \t loss=2.0805 \t val_loss=2.7973 \t time=3.86s\n","Epoch 43/50 \t loss=2.0720 \t val_loss=3.0327 \t time=3.78s\n","Epoch 44/50 \t loss=2.0510 \t val_loss=3.0947 \t time=3.85s\n","Epoch 45/50 \t loss=2.0805 \t val_loss=2.6477 \t time=3.87s\n","Epoch 46/50 \t loss=2.0559 \t val_loss=3.3256 \t time=3.92s\n","Epoch 47/50 \t loss=2.0914 \t val_loss=2.5484 \t time=3.90s\n","Epoch 48/50 \t loss=2.0692 \t val_loss=3.2191 \t time=3.80s\n","Epoch 49/50 \t loss=2.0446 \t val_loss=2.8488 \t time=3.91s\n","Epoch 50/50 \t loss=2.0658 \t val_loss=2.8847 \t time=3.86s\n","Len Train (in batch): 29\n","Len validation (in batch): 7\n","Fold 2\n","Epoch 1/50 \t loss=2.0367 \t val_loss=3.5755 \t time=3.87s\n","Epoch 2/50 \t loss=1.9542 \t val_loss=3.3715 \t time=3.91s\n","Epoch 3/50 \t loss=1.9823 \t val_loss=3.1628 \t time=3.89s\n","Epoch 4/50 \t loss=2.0198 \t val_loss=3.0441 \t time=3.94s\n","Epoch 5/50 \t loss=1.9502 \t val_loss=3.3072 \t time=3.86s\n","Epoch 6/50 \t loss=1.9474 \t val_loss=3.5834 \t time=3.89s\n","Epoch 7/50 \t loss=1.9590 \t val_loss=4.1395 \t time=3.87s\n","Epoch 8/50 \t loss=2.0199 \t val_loss=3.1475 \t time=3.94s\n","Epoch 9/50 \t loss=2.0082 \t val_loss=3.6388 \t time=3.83s\n","Epoch 10/50 \t loss=1.9279 \t val_loss=3.8908 \t time=3.82s\n","Epoch 11/50 \t loss=1.9707 \t val_loss=3.9738 \t time=3.83s\n","Epoch 12/50 \t loss=1.9563 \t val_loss=3.2406 \t time=3.86s\n","Epoch 13/50 \t loss=1.9506 \t val_loss=3.6464 \t time=3.87s\n","Epoch 14/50 \t loss=1.9821 \t val_loss=3.5161 \t time=3.87s\n","Epoch 15/50 \t loss=1.9484 \t val_loss=3.8590 \t time=3.82s\n","Epoch 16/50 \t loss=1.9352 \t val_loss=3.0639 \t time=3.89s\n","Epoch 17/50 \t loss=1.9743 \t val_loss=3.3339 \t time=3.89s\n","Epoch 18/50 \t loss=1.9405 \t val_loss=4.1056 \t time=3.89s\n","Epoch 20/50 \t loss=2.0032 \t val_loss=3.6868 \t time=3.82s\n","Epoch 21/50 \t loss=1.9714 \t val_loss=3.1946 \t time=3.84s\n","Epoch 22/50 \t loss=1.9609 \t val_loss=3.4439 \t time=4.02s\n","Epoch 23/50 \t loss=1.9493 \t val_loss=4.0981 \t time=4.00s\n","Epoch 24/50 \t loss=1.9450 \t val_loss=3.7536 \t time=3.88s\n","Epoch 25/50 \t loss=1.9445 \t val_loss=3.2803 \t time=3.83s\n","Epoch 26/50 \t loss=1.9579 \t val_loss=4.6765 \t time=3.92s\n","Epoch 27/50 \t loss=2.0085 \t val_loss=3.7322 \t time=3.88s\n","Epoch 28/50 \t loss=1.9508 \t val_loss=3.7051 \t time=3.87s\n","Epoch 29/50 \t loss=1.9390 \t val_loss=3.5835 \t time=3.87s\n","Epoch 30/50 \t loss=1.9856 \t val_loss=3.4771 \t time=3.83s\n","Epoch 31/50 \t loss=1.9462 \t val_loss=3.0183 \t time=3.82s\n","Epoch 32/50 \t loss=1.9431 \t val_loss=3.4040 \t time=3.87s\n","Epoch 33/50 \t loss=1.9259 \t val_loss=3.1464 \t time=3.81s\n","Epoch 34/50 \t loss=1.9502 \t val_loss=3.6457 \t time=3.83s\n","Epoch 35/50 \t loss=1.9858 \t val_loss=3.1655 \t time=3.85s\n","Epoch 36/50 \t loss=1.9208 \t val_loss=3.5019 \t time=3.91s\n","Epoch 37/50 \t loss=1.9315 \t val_loss=4.0880 \t time=3.84s\n","Epoch 38/50 \t loss=1.9372 \t val_loss=3.2694 \t time=3.72s\n","Epoch 39/50 \t loss=1.9834 \t val_loss=3.3043 \t time=3.76s\n","Epoch 40/50 \t loss=1.9455 \t val_loss=3.5657 \t time=3.74s\n","Epoch 41/50 \t loss=1.9742 \t val_loss=3.4092 \t time=3.81s\n","Epoch 42/50 \t loss=1.9986 \t val_loss=3.9407 \t time=3.82s\n","Epoch 43/50 \t loss=1.9306 \t val_loss=3.9084 \t time=3.84s\n","Epoch 44/50 \t loss=1.9756 \t val_loss=3.9897 \t time=3.77s\n","Epoch 45/50 \t loss=1.9993 \t val_loss=4.3971 \t time=3.72s\n","Epoch 46/50 \t loss=1.9589 \t val_loss=3.6204 \t time=3.90s\n","Epoch 47/50 \t loss=2.0108 \t val_loss=2.8912 \t time=3.81s\n","Epoch 48/50 \t loss=1.9900 \t val_loss=3.1212 \t time=3.77s\n","Epoch 49/50 \t loss=2.0167 \t val_loss=4.1310 \t time=3.81s\n","Epoch 50/50 \t loss=1.9508 \t val_loss=3.5870 \t time=3.80s\n","Len Train (in batch): 29\n","Len validation (in batch): 7\n","Fold 3\n","Epoch 1/50 \t loss=2.2132 \t val_loss=2.4566 \t time=3.79s\n","Epoch 2/50 \t loss=2.2939 \t val_loss=2.4354 \t time=3.83s\n","Epoch 3/50 \t loss=2.2521 \t val_loss=2.5736 \t time=3.74s\n","Epoch 4/50 \t loss=2.2505 \t val_loss=2.4473 \t time=3.74s\n","Epoch 5/50 \t loss=2.2259 \t val_loss=2.4133 \t time=3.76s\n","Epoch 6/50 \t loss=2.2168 \t val_loss=2.3725 \t time=3.73s\n","Epoch 7/50 \t loss=2.2150 \t val_loss=2.6766 \t time=3.86s\n","Epoch 8/50 \t loss=2.2851 \t val_loss=2.7007 \t time=3.85s\n","Epoch 9/50 \t loss=2.2472 \t val_loss=2.4298 \t time=3.84s\n","Epoch 10/50 \t loss=2.2709 \t val_loss=2.4608 \t time=3.82s\n","Epoch 11/50 \t loss=2.3004 \t val_loss=2.3578 \t time=3.80s\n","Epoch 12/50 \t loss=2.3846 \t val_loss=2.4556 \t time=3.86s\n","Epoch 13/50 \t loss=2.2958 \t val_loss=2.5274 \t time=3.85s\n","Epoch 14/50 \t loss=2.2239 \t val_loss=2.4309 \t time=3.87s\n","Epoch 15/50 \t loss=2.2637 \t val_loss=2.3479 \t time=3.86s\n","Epoch 16/50 \t loss=2.2601 \t val_loss=2.4652 \t time=3.81s\n","Epoch 17/50 \t loss=2.2375 \t val_loss=2.4417 \t time=3.86s\n","Epoch 18/50 \t loss=2.2818 \t val_loss=2.5928 \t time=3.93s\n","Epoch 19/50 \t loss=2.2407 \t val_loss=2.4494 \t time=3.97s\n","Epoch 20/50 \t loss=2.2164 \t val_loss=2.3762 \t time=4.27s\n","Epoch 21/50 \t loss=2.2130 \t val_loss=2.4122 \t time=4.02s\n","Epoch 22/50 \t loss=2.1960 \t val_loss=2.3991 \t time=3.92s\n","Epoch 23/50 \t loss=2.2185 \t val_loss=2.3449 \t time=3.88s\n","Epoch 24/50 \t loss=2.2459 \t val_loss=2.4341 \t time=3.88s\n","Epoch 25/50 \t loss=2.2224 \t val_loss=2.3530 \t time=3.90s\n","Epoch 26/50 \t loss=2.2665 \t val_loss=2.3832 \t time=3.90s\n","Epoch 27/50 \t loss=2.2359 \t val_loss=2.3820 \t time=3.83s\n","Epoch 28/50 \t loss=2.2134 \t val_loss=2.3841 \t time=3.81s\n","Epoch 29/50 \t loss=2.2334 \t val_loss=2.6423 \t time=3.93s\n","Epoch 30/50 \t loss=2.2440 \t val_loss=2.5216 \t time=3.84s\n","Epoch 31/50 \t loss=2.2095 \t val_loss=2.4558 \t time=3.81s\n","Epoch 32/50 \t loss=2.2027 \t val_loss=2.5789 \t time=3.84s\n","Epoch 33/50 \t loss=2.2360 \t val_loss=2.3571 \t time=3.82s\n","Epoch 34/50 \t loss=2.2536 \t val_loss=2.3570 \t time=3.77s\n","Epoch 35/50 \t loss=2.2619 \t val_loss=2.2959 \t time=3.84s\n","Epoch 36/50 \t loss=2.2846 \t val_loss=2.3605 \t time=3.83s\n","Epoch 37/50 \t loss=2.2342 \t val_loss=2.7747 \t time=3.79s\n","Epoch 38/50 \t loss=2.2596 \t val_loss=2.5105 \t time=3.82s\n","Epoch 39/50 \t loss=2.2321 \t val_loss=2.5663 \t time=3.82s\n","Epoch 40/50 \t loss=2.2592 \t val_loss=2.5702 \t time=3.90s\n","Epoch 41/50 \t loss=2.2627 \t val_loss=2.3892 \t time=3.84s\n","Epoch 42/50 \t loss=2.2166 \t val_loss=2.4487 \t time=3.75s\n","Epoch 43/50 \t loss=2.2293 \t val_loss=2.5203 \t time=3.83s\n","Epoch 44/50 \t loss=2.2361 \t val_loss=2.3653 \t time=3.78s\n","Epoch 45/50 \t loss=2.2244 \t val_loss=2.5029 \t time=3.90s\n","Epoch 46/50 \t loss=2.2261 \t val_loss=2.3599 \t time=3.86s\n","Epoch 47/50 \t loss=2.2093 \t val_loss=2.4616 \t time=3.92s\n","Epoch 48/50 \t loss=2.2440 \t val_loss=2.4694 \t time=3.88s\n","Epoch 49/50 \t loss=2.2278 \t val_loss=2.7085 \t time=3.82s\n","Epoch 50/50 \t loss=2.2494 \t val_loss=2.3158 \t time=3.82s\n","Len Train (in batch): 29\n","Len validation (in batch): 8\n","Fold 4\n","Epoch 1/50 \t loss=2.2108 \t val_loss=2.7292 \t time=3.87s\n","Epoch 2/50 \t loss=2.3256 \t val_loss=2.3090 \t time=4.19s\n","Epoch 3/50 \t loss=2.1770 \t val_loss=2.4741 \t time=3.89s\n","Epoch 4/50 \t loss=2.2267 \t val_loss=2.7503 \t time=3.83s\n","Epoch 5/50 \t loss=2.2532 \t val_loss=2.3278 \t time=3.81s\n","Epoch 6/50 \t loss=2.2774 \t val_loss=2.3107 \t time=3.92s\n","Epoch 7/50 \t loss=2.2670 \t val_loss=2.4912 \t time=3.86s\n","Epoch 8/50 \t loss=2.1906 \t val_loss=2.6018 \t time=3.81s\n","Epoch 9/50 \t loss=2.2286 \t val_loss=2.3540 \t time=3.92s\n","Epoch 10/50 \t loss=2.2430 \t val_loss=2.3484 \t time=3.82s\n","Epoch 11/50 \t loss=2.2968 \t val_loss=2.5116 \t time=3.91s\n","Epoch 12/50 \t loss=2.2342 \t val_loss=2.6756 \t time=3.86s\n","Epoch 13/50 \t loss=2.1727 \t val_loss=2.4044 \t time=3.85s\n","Epoch 14/50 \t loss=2.1687 \t val_loss=2.8613 \t time=3.83s\n","Epoch 15/50 \t loss=2.2880 \t val_loss=2.4741 \t time=3.96s\n","Epoch 16/50 \t loss=2.2473 \t val_loss=2.5392 \t time=3.82s\n","Epoch 17/50 \t loss=2.1856 \t val_loss=2.3575 \t time=3.86s\n","Epoch 18/50 \t loss=2.1804 \t val_loss=2.4792 \t time=3.83s\n","Epoch 19/50 \t loss=2.2164 \t val_loss=2.3702 \t time=3.95s\n","Epoch 20/50 \t loss=2.2541 \t val_loss=2.6326 \t time=3.89s\n","Epoch 21/50 \t loss=2.2683 \t val_loss=2.4392 \t time=3.84s\n","Epoch 22/50 \t loss=2.2748 \t val_loss=2.6009 \t time=3.87s\n","Epoch 23/50 \t loss=2.1984 \t val_loss=2.7273 \t time=3.92s\n","Epoch 24/50 \t loss=2.2184 \t val_loss=2.3469 \t time=3.91s\n","Epoch 25/50 \t loss=2.3082 \t val_loss=2.4222 \t time=3.82s\n","Epoch 26/50 \t loss=2.2943 \t val_loss=2.7874 \t time=3.90s\n","Epoch 27/50 \t loss=2.2442 \t val_loss=3.7900 \t time=3.93s\n","Epoch 28/50 \t loss=2.3087 \t val_loss=2.4625 \t time=3.86s\n","Epoch 29/50 \t loss=2.2035 \t val_loss=2.4038 \t time=3.91s\n","Epoch 30/50 \t loss=2.2257 \t val_loss=3.1636 \t time=3.84s\n","Epoch 31/50 \t loss=2.2873 \t val_loss=2.5122 \t time=3.83s\n","Epoch 32/50 \t loss=2.2179 \t val_loss=2.6332 \t time=3.86s\n","Epoch 33/50 \t loss=2.2297 \t val_loss=2.3670 \t time=3.83s\n","Epoch 34/50 \t loss=2.2451 \t val_loss=2.5005 \t time=3.88s\n","Epoch 35/50 \t loss=2.2859 \t val_loss=2.4413 \t time=3.85s\n","Epoch 36/50 \t loss=2.1630 \t val_loss=2.5090 \t time=3.97s\n","Epoch 37/50 \t loss=2.2537 \t val_loss=2.3452 \t time=3.86s\n","Epoch 38/50 \t loss=2.1871 \t val_loss=2.3518 \t time=3.86s\n","Epoch 39/50 \t loss=2.3940 \t val_loss=2.4261 \t time=3.88s\n","Epoch 40/50 \t loss=2.2658 \t val_loss=2.6913 \t time=3.85s\n","Epoch 41/50 \t loss=2.1929 \t val_loss=2.6561 \t time=3.81s\n","Epoch 42/50 \t loss=2.1959 \t val_loss=2.4124 \t time=3.77s\n","Epoch 43/50 \t loss=2.2245 \t val_loss=2.5693 \t time=3.84s\n","Epoch 44/50 \t loss=2.2190 \t val_loss=2.4453 \t time=3.95s\n","Epoch 45/50 \t loss=2.1733 \t val_loss=2.5116 \t time=3.87s\n","Epoch 46/50 \t loss=2.1544 \t val_loss=2.8499 \t time=3.85s\n","Epoch 47/50 \t loss=2.2420 \t val_loss=2.7050 \t time=3.76s\n","Epoch 48/50 \t loss=2.3045 \t val_loss=2.4151 \t time=3.84s\n","Epoch 49/50 \t loss=2.2059 \t val_loss=2.4263 \t time=3.91s\n","Epoch 50/50 \t loss=2.2464 \t val_loss=2.3961 \t time=4.09s\n","Len Train (in batch): 29\n","Len validation (in batch): 7\n","Fold 5\n","Epoch 1/50 \t loss=2.5278 \t val_loss=0.8922 \t time=4.20s\n","Epoch 2/50 \t loss=2.4395 \t val_loss=1.0319 \t time=3.90s\n","Epoch 3/50 \t loss=2.4887 \t val_loss=1.1809 \t time=3.86s\n","Epoch 4/50 \t loss=2.4783 \t val_loss=1.2448 \t time=3.84s\n","Epoch 5/50 \t loss=2.5257 \t val_loss=1.1407 \t time=3.86s\n","Epoch 6/50 \t loss=2.4561 \t val_loss=0.8646 \t time=3.83s\n","Epoch 7/50 \t loss=2.4751 \t val_loss=1.5659 \t time=4.00s\n","Epoch 8/50 \t loss=2.4895 \t val_loss=1.2648 \t time=3.83s\n","Epoch 9/50 \t loss=2.4565 \t val_loss=1.1920 \t time=3.93s\n","Epoch 10/50 \t loss=2.4562 \t val_loss=1.0657 \t time=3.81s\n","Epoch 11/50 \t loss=2.4348 \t val_loss=1.6432 \t time=3.93s\n","Epoch 12/50 \t loss=2.5400 \t val_loss=1.2662 \t time=3.84s\n","Epoch 13/50 \t loss=2.4662 \t val_loss=1.7429 \t time=3.88s\n","Epoch 14/50 \t loss=2.5332 \t val_loss=1.2874 \t time=3.97s\n","Epoch 15/50 \t loss=2.4505 \t val_loss=0.9163 \t time=3.79s\n","Epoch 16/50 \t loss=2.4585 \t val_loss=1.0389 \t time=3.93s\n","Epoch 17/50 \t loss=2.4968 \t val_loss=0.9074 \t time=3.81s\n","Epoch 18/50 \t loss=2.4727 \t val_loss=1.0221 \t time=3.88s\n","Epoch 19/50 \t loss=2.4207 \t val_loss=1.1627 \t time=3.80s\n","Epoch 20/50 \t loss=2.4480 \t val_loss=1.2319 \t time=3.94s\n","Epoch 21/50 \t loss=2.4960 \t val_loss=1.2769 \t time=3.90s\n","Epoch 22/50 \t loss=2.4446 \t val_loss=1.0739 \t time=3.86s\n","Epoch 23/50 \t loss=2.4517 \t val_loss=0.9030 \t time=3.83s\n","Epoch 24/50 \t loss=2.4978 \t val_loss=0.9793 \t time=3.85s\n","Epoch 25/50 \t loss=2.4348 \t val_loss=1.2750 \t time=3.80s\n","Epoch 26/50 \t loss=2.4553 \t val_loss=0.8855 \t time=3.81s\n","Epoch 27/50 \t loss=2.5597 \t val_loss=0.9019 \t time=3.91s\n","Epoch 28/50 \t loss=2.4571 \t val_loss=0.8874 \t time=3.89s\n","Epoch 29/50 \t loss=2.4845 \t val_loss=0.9717 \t time=3.94s\n","Epoch 30/50 \t loss=2.4293 \t val_loss=1.0745 \t time=3.87s\n","Epoch 31/50 \t loss=2.4410 \t val_loss=1.0050 \t time=3.91s\n","Epoch 32/50 \t loss=2.4384 \t val_loss=0.9896 \t time=3.79s\n","Epoch 33/50 \t loss=2.4556 \t val_loss=0.9324 \t time=3.71s\n","Epoch 34/50 \t loss=2.4598 \t val_loss=1.1728 \t time=3.86s\n","Epoch 35/50 \t loss=2.4575 \t val_loss=1.0183 \t time=3.78s\n","Epoch 36/50 \t loss=2.4397 \t val_loss=1.0508 \t time=3.78s\n","Epoch 37/50 \t loss=2.4979 \t val_loss=1.0571 \t time=3.86s\n","Epoch 38/50 \t loss=2.4406 \t val_loss=1.2558 \t time=3.81s\n","Epoch 39/50 \t loss=2.4586 \t val_loss=1.2625 \t time=3.72s\n","Epoch 40/50 \t loss=2.4564 \t val_loss=0.8857 \t time=3.80s\n","Epoch 41/50 \t loss=2.4439 \t val_loss=1.1036 \t time=3.86s\n","Epoch 42/50 \t loss=2.4332 \t val_loss=1.1795 \t time=3.82s\n","Epoch 43/50 \t loss=2.4506 \t val_loss=0.9915 \t time=3.87s\n","Epoch 44/50 \t loss=2.4290 \t val_loss=1.0468 \t time=3.77s\n","Epoch 45/50 \t loss=2.4398 \t val_loss=1.2431 \t time=3.81s\n","Epoch 46/50 \t loss=2.4487 \t val_loss=1.2090 \t time=3.81s\n","Epoch 47/50 \t loss=2.4875 \t val_loss=1.5112 \t time=3.87s\n","Epoch 48/50 \t loss=2.5589 \t val_loss=1.2240 \t time=3.86s\n","Epoch 49/50 \t loss=2.4876 \t val_loss=0.8496 \t time=3.89s\n","Epoch 50/50 \t loss=2.5188 \t val_loss=0.8796 \t time=3.85s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QNxwAJ16JzaR","colab_type":"code","colab":{}},"source":["# Sleep for a few seconds.\n","import time\n","time.sleep(2)\n","\n","# Play an audio beep. Any audio URL will do.\n","from google.colab import output\n","output.eval_js('new Audio(\"https://upload.wikimedia.org/wikipedia/commons/0/05/Beep-09.ogg\").play()')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zML7-wribUM1","colab_type":"text"},"source":["*Test* the final Results:\n"]},{"cell_type":"code","metadata":{"id":"nVTqTCmYcSlb","colab_type":"code","outputId":"b511a6c0-336e-4c98-c2aa-4b24c20067d3","executionInfo":{"status":"ok","timestamp":1574846176406,"user_tz":-60,"elapsed":4777,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["# Save the network parameters\n","torch.save(model.state_dict(), \"/content/drive/My Drive/model/fully-connected-posttrain.pt\") \n","\n","'''\n","On suggestion of Leonardo file k-fold-reg5-01.pt is a possible try to \n","decrease the lambda value (0.1).\n","By previous observations if lambda is = 1.0 the frames that appear less times have\n","more importance and by worsening the results.\n","params: \n","  learning_rate = 0.001\n","  lambda = 0.1\n","  num_epochs = 50\n","  splits = 10\n","  batch_size = 32\n","  model = DenseNetFixed(5,1)\n","'''"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nOn suggestion of Leonardo file k-fold-reg5-01.pt is a possible try to \\ndecrease the lambda value (0.1).\\nBy previous observations if lambda is = 1.0 the frames that appear less times have\\nmore importance and by worsening the results.\\nparams: \\n  learning_rate = 0.001\\n  lambda = 0.1\\n  num_epochs = 50\\n  splits = 10\\n  batch_size = 32\\n  model = DenseNetFixed(5,1)\\n'"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"XZyM1crONQc_","colab_type":"text"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"WNdDwRrPX5nj","colab_type":"text"},"source":["### Testing the network with kfold cross validation\n","Also the predicted labels are appended into a list to plot them after."]},{"cell_type":"code","metadata":{"id":"RtHauHUfs_4U","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"65lFmo7Qsxmd","colab_type":"code","outputId":"acf5dcea-4532-4054-f697-3282200decbb","executionInfo":{"status":"ok","timestamp":1574846300153,"user_tz":-60,"elapsed":7290,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["test_list = generateDatasetIDS(test_IDs.ID,\"/content/drive/My Drive/frames/\")\n","print(test_list)\n","test_custom = CustomListDataset(images_list = test_list, df_weights = weights, root_dir=\"/content/drive/My Drive/frames/\", transform = transform)\n","test_dataloader = torch.utils.data.DataLoader(test_custom, batch_size=32, shuffle=False, num_workers=1)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["['30/30_81_16bit.png', '30/30_57_16bit.png', '30/30_64_16bit.png', '30/30_51_16bit.png', '30/30_62_16bit.png', '30/30_76_16bit.png', '30/30_70_16bit.png', '30/30_69_16bit.png', '30/30_63_16bit.png', '30/30_50_16bit.png', '30/30_56_16bit.png', '30/30_77_16bit.png', '30/30_49_16bit.png', '30/30_65_16bit.png', '30/30_80_16bit.png', '30/30_71_16bit.png', '30/30_68_16bit.png', '30/30_55_16bit.png', '30/30_58_16bit.png', '30/30_60_16bit.png', '30/30_74_16bit.png', '30/30_79_16bit.png', '30/30_78_16bit.png', '30/30_72_16bit.png', '30/30_83_16bit.png', '30/30_66_16bit.png', '30/30_53_16bit.png', '30/30_54_16bit.png', '30/30_75_16bit.png', '30/30_59_16bit.png', '30/30_61_16bit.png', '30/30_73_16bit.png', '30/30_67_16bit.png', '30/30_52_16bit.png', '30/30_82_16bit.png', '67/67_46_16bit.png', '67/67_52_16bit.png', '67/67_54_16bit.png', '67/67_59_16bit.png', '67/67_47_16bit.png', '67/67_61_16bit.png', '67/67_53_16bit.png', '67/67_50_16bit.png', '67/67_58_16bit.png', '67/67_55_16bit.png', '67/67_41_16bit.png', '67/67_60_16bit.png', '67/67_44_16bit.png', '67/67_49_16bit.png', '67/67_56_16bit.png', '67/67_63_16bit.png', '67/67_42_16bit.png', '67/67_43_16bit.png', '67/67_62_16bit.png', '67/67_51_16bit.png', '67/67_48_16bit.png', '67/67_45_16bit.png', '67/67_57_16bit.png', '62/62_51_16bit.png', '62/62_57_16bit.png', '62/62_39_16bit.png', '62/62_43_16bit.png', '62/62_48_16bit.png', '62/62_45_16bit.png', '62/62_38_16bit.png', '62/62_50_16bit.png', '62/62_44_16bit.png', '62/62_42_16bit.png', '62/62_55_16bit.png', '62/62_49_16bit.png', '62/62_56_16bit.png', '62/62_41_16bit.png', '62/62_36_16bit.png', '62/62_53_16bit.png', '62/62_47_16bit.png', '62/62_54_16bit.png', '62/62_52_16bit.png', '62/62_40_16bit.png', '62/62_46_16bit.png', '62/62_37_16bit.png', '47/47_70_16bit.png', '47/47_64_16bit.png', '47/47_81_16bit.png', '47/47_69_16bit.png', '47/47_62_16bit.png', '47/47_57_16bit.png', '47/47_80_16bit.png', '47/47_71_16bit.png', '47/47_76_16bit.png', '47/47_68_16bit.png', '47/47_63_16bit.png', '47/47_56_16bit.png', '47/47_77_16bit.png', '47/47_65_16bit.png', '47/47_66_16bit.png', '47/47_83_16bit.png', '47/47_72_16bit (1).png', '47/47_60_16bit (1).png', '47/47_58_16bit (1).png', '47/47_79_16bit (1).png', '47/47_78_16bit (1).png', '47/47_82_16bit (1).png', '47/47_73_16bit (1).png', '47/47_55_16bit (1).png', '47/47_67_16bit (1).png', '47/47_74_16bit (1).png', '47/47_59_16bit.png', '47/47_75_16bit.png', '47/47_61_16bit.png', '47/47_72_16bit.png', '47/47_58_16bit.png', '47/47_67_16bit.png', '47/47_78_16bit.png', '47/47_79_16bit.png', '47/47_60_16bit.png', '47/47_82_16bit.png', '47/47_55_16bit.png', '47/47_73_16bit.png', '47/47_74_16bit.png', '42/42_75_16bit.png', '42/42_59_16bit.png', '42/42_78_16bit.png', '42/42_90_16bit.png', '42/42_61_16bit.png', '42/42_84_16bit.png', '42/42_89_16bit.png', '42/42_73_16bit.png', '42/42_82_16bit.png', '42/42_67_16bit.png', '42/42_74_16bit.png', '42/42_60_16bit.png', '42/42_91_16bit.png', '42/42_58_16bit.png', '42/42_85_16bit.png', '42/42_79_16bit.png', '42/42_72_16bit.png', '42/42_83_16bit.png', '42/42_88_16bit.png', '42/42_92_16bit.png', '42/42_80_16bit.png', '42/42_77_16bit.png', '42/42_86_16bit.png', '42/42_68_16bit.png', '42/42_94_16bit.png', '42/42_66_16bit.png', '42/42_63_16bit.png', '42/42_65_16bit.png', '42/42_71_16bit.png', '42/42_76_16bit.png', '42/42_62_16bit.png', '42/42_93_16bit.png', '42/42_87_16bit.png', '42/42_70_16bit.png', '42/42_64_16bit.png', '42/42_95_16bit.png', '42/42_81_16bit.png', '42/42_69_16bit.png', '40/40_81_16bit.png', '40/40_69_16bit.png', '40/40_64_16bit.png', '40/40_48_16bit.png', '40/40_70_16bit.png', '40/40_51_16bit.png', '40/40_45_16bit.png', '40/40_57_16bit.png', '40/40_43_16bit.png', '40/40_65_16bit.png', '40/40_76_16bit.png', '40/40_71_16bit.png', '40/40_80_16bit.png', '40/40_49_16bit.png', '40/40_62_16bit.png', '40/40_68_16bit.png', '40/40_44_16bit.png', '40/40_50_16bit.png', '40/40_86_16bit.png', '40/40_77_16bit.png', '40/40_42_16bit.png', '40/40_56_16bit.png', '40/40_66_16bit.png', '40/40_63_16bit.png', '40/40_83_16bit.png', '40/40_47_16bit.png', '40/40_72_16bit.png', '40/40_53_16bit.png', '40/40_85_16bit.png', '40/40_58_16bit.png', '40/40_79_16bit.png', '40/40_82_16bit.png', '40/40_67_16bit.png', '40/40_55_16bit.png', '40/40_46_16bit.png', '40/40_74_16bit.png', '40/40_73_16bit.png', '40/40_60_16bit.png', '40/40_52_16bit.png', '40/40_84_16bit.png', '40/40_78_16bit.png', '40/40_59_16bit.png', '40/40_75_16bit.png', '40/40_54_16bit.png', '40/40_61_16bit.png', '90/90_44_16bit.png', '90/90_49_16bit.png', '90/90_50_16bit.png', '90/90_35_16bit.png', '90/90_38_16bit.png', '90/90_42_16bit.png', '90/90_48_16bit.png', '90/90_52_16bit.png', '90/90_43_16bit.png', '90/90_39_16bit.png', '90/90_45_16bit.png', '90/90_34_16bit.png', '90/90_51_16bit.png', '90/90_46_16bit.png', '90/90_40_16bit.png', '90/90_37_16bit.png', '90/90_47_16bit.png', '90/90_41_16bit.png', '90/90_36_16bit.png', '45/45_40_16bit.png', '45/45_59_16bit.png', '45/45_54_16bit.png', '45/45_46_16bit.png', '45/45_58_16bit.png', '45/45_52_16bit.png', '45/45_60_16bit.png', '45/45_38_16bit.png', '45/45_41_16bit.png', '45/45_47_16bit.png', '45/45_42_16bit.png', '45/45_53_16bit.png', '45/45_55_16bit.png', '45/45_56_16bit.png', '45/45_50_16bit.png', '45/45_49_16bit.png', '45/45_44_16bit.png', '45/45_57_16bit.png', '45/45_45_16bit.png', '45/45_43_16bit.png', '45/45_51_16bit.png', '45/45_39_16bit.png', '45/45_48_16bit.png', '10/10_78_16bit.png', '10/10_90_16bit.png', '10/10_103_16bit.png', '10/10_84_16bit.png', '10/10_75_16bit.png', '10/10_89_16bit.png', '10/10_73_16bit.png', '10/10_82_16bit.png', '10/10_85_16bit.png', '10/10_96_16bit.png', '10/10_79_16bit.png', '10/10_105_16bit.png', '10/10_91_16bit.png', '10/10_88_16bit.png', '10/10_74_16bit.png', '10/10_102_16bit.png', '10/10_83_16bit.png', '10/10_86_16bit.png', '10/10_97_16bit.png', '10/10_104_16bit.png', '10/10_72_16bit.png', '10/10_92_16bit.png', '10/10_77_16bit.png', '10/10_101_16bit.png', '10/10_94_16bit.png', '10/10_80_16bit.png', '10/10_93_16bit.png', '10/10_100_16bit.png', '10/10_76_16bit.png', '10/10_71_16bit.png', '10/10_99_16bit.png', '10/10_87_16bit.png', '10/10_95_16bit.png', '10/10_98_16bit.png', '10/10_81_16bit.png', '0/0_39_16bit.png', '0/0_43_16bit.png', '0/0_62_16bit.png', '0/0_45_16bit.png', '0/0_70_16bit.png', '0/0_51_16bit.png', '0/0_34_16bit.png', '0/0_57_16bit.png', '0/0_64_16bit.png', '0/0_48_16bit.png', '0/0_69_16bit.png', '0/0_32_16bit.png', '0/0_63_16bit.png', '0/0_65_16bit.png', '0/0_35_16bit.png', '0/0_56_16bit.png', '0/0_42_16bit.png', '0/0_44_16bit.png', '0/0_50_16bit.png', '0/0_38_16bit.png', '0/0_71_16bit.png', '0/0_27_16bit.png', '0/0_68_16bit.png', '0/0_41_16bit.png', '0/0_49_16bit.png', '0/0_33_16bit.png', '0/0_72_16bit.png', '0/0_60_16bit.png', '0/0_58_16bit.png', '0/0_74_16bit.png', '0/0_55_16bit.png', '0/0_36_16bit.png', '0/0_66_16bit.png', '0/0_53_16bit.png', '0/0_47_16bit.png', '0/0_29_16bit.png', '0/0_59_16bit.png', '0/0_30_16bit.png', '0/0_54_16bit.png', '0/0_40_16bit.png', '0/0_37_16bit.png', '0/0_61_16bit.png', '0/0_67_16bit.png', '0/0_73_16bit.png', '0/0_52_16bit.png', '0/0_28_16bit.png', '0/0_31_16bit.png', '0/0_46_16bit.png', '18/18_19_16bit.png', '18/18_43_16bit.png', '18/18_33_16bit.png', '18/18_42_16bit.png', '18/18_21_16bit.png', '18/18_44_16bit.png', '18/18_35_16bit.png', '18/18_38_16bit.png', '18/18_18_16bit.png', '18/18_27_16bit.png', '18/18_39_16bit.png', '18/18_15_16bit.png', '18/18_20_16bit.png', '18/18_34_16bit.png', '18/18_37_16bit.png', '18/18_23_16bit.png', '18/18_40_16bit.png', '18/18_32_16bit.png', '18/18_26_16bit.png', '18/18_16_16bit.png', '18/18_28_16bit.png', '18/18_31_16bit.png', '18/18_25_16bit.png', '18/18_41_16bit.png', '18/18_24_16bit.png', '18/18_36_16bit.png', '18/18_30_16bit.png', '18/18_17_16bit.png', '18/18_22_16bit.png', '18/18_29_16bit.png', '31/31_70_16bit.png', '31/31_64_16bit.png', '31/31_45_16bit.png', '31/31_51_16bit.png', '31/31_48_16bit.png', '31/31_62_16bit.png', '31/31_69_16bit.png', '31/31_57_16bit.png', '31/31_65_16bit.png', '31/31_43_16bit.png', '31/31_76_16bit.png', '31/31_44_16bit.png', '31/31_71_16bit.png', '31/31_50_16bit.png', '31/31_68_16bit.png', '31/31_49_16bit.png', '31/31_42_16bit.png', '31/31_56_16bit.png', '31/31_60_16bit.png', '31/31_53_16bit.png', '31/31_63_16bit.png', '31/31_77_16bit.png', '31/31_47_16bit.png', '31/31_66_16bit.png', '31/31_72_16bit.png', '31/31_74_16bit.png', '31/31_55_16bit.png', '31/31_41_16bit.png', '31/31_52_16bit.png', '31/31_46_16bit.png', '31/31_58_16bit.png', '31/31_61_16bit.png', '31/31_75_16bit.png', '31/31_40_16bit.png', '31/31_54_16bit.png', '31/31_67_16bit.png', '31/31_73_16bit.png', '31/31_59_16bit.png', '97/97_50_16bit.png', '97/97_35_16bit.png', '97/97_44_16bit.png', '97/97_33_16bit.png', '97/97_49_16bit.png', '97/97_38_16bit.png', '97/97_45_16bit.png', '97/97_48_16bit.png', '97/97_42_16bit.png', '97/97_39_16bit.png', '97/97_34_16bit.png', '97/97_46_16bit.png', '97/97_37_16bit.png', '97/97_43_16bit.png', '97/97_40_16bit.png', '97/97_47_16bit.png', '97/97_41_16bit.png', '97/97_36_16bit.png', '85/85_68_16bit.png', '85/85_65_16bit.png', '85/85_71_16bit.png', '85/85_63_16bit.png', '85/85_59_16bit.png', '85/85_56_16bit.png', '85/85_57_16bit.png', '85/85_70_16bit.png', '85/85_69_16bit.png', '85/85_62_16bit.png', '85/85_64_16bit.png', '85/85_54_16bit.png', '85/85_67_16bit.png', '85/85_66_16bit.png', '85/85_61_16bit.png', '85/85_55_16bit.png', '85/85_58_16bit.png', '85/85_72_16bit.png', '85/85_60_16bit.png', '76/76_70_16bit.png', '76/76_51_16bit.png', '76/76_48_16bit.png', '76/76_64_16bit.png', '76/76_76_16bit.png', '76/76_69_16bit.png', '76/76_45_16bit.png', '76/76_62_16bit.png', '76/76_43_16bit.png', '76/76_39_16bit.png', '76/76_57_16bit.png', '76/76_44_16bit.png', '76/76_38_16bit.png', '76/76_65_16bit.png', '76/76_77_16bit.png', '76/76_49_16bit.png', '76/76_71_16bit.png', '76/76_68_16bit.png', '76/76_50_16bit.png', '76/76_63_16bit.png', '76/76_42_16bit.png', '76/76_66_16bit.png', '76/76_53_16bit.png', '76/76_72_16bit.png', '76/76_56_16bit.png', '76/76_60_16bit.png', '76/76_41_16bit.png', '76/76_74_16bit.png', '76/76_58_16bit.png', '76/76_55_16bit.png', '76/76_47_16bit.png', '76/76_36_16bit.png', '76/76_73_16bit.png', '76/76_67_16bit.png', '76/76_46_16bit.png', '76/76_52_16bit.png', '76/76_40_16bit.png', '76/76_61_16bit.png', '76/76_54_16bit.png', '76/76_37_16bit.png', '76/76_75_16bit.png', '76/76_59_16bit.png', '4/4_59_16bit.png', '4/4_75_16bit.png', '4/4_61_16bit.png', '4/4_73_16bit.png', '4/4_56_16bit.png', '4/4_58_16bit.png', '4/4_60_16bit.png', '4/4_74_16bit.png', '4/4_66_16bit.png', '4/4_72_16bit.png', '4/4_67_16bit.png', '4/4_71_16bit.png', '4/4_63_16bit.png', '4/4_57_16bit.png', '4/4_62_16bit.png', '4/4_68_16bit.png', '4/4_65_16bit.png', '4/4_64_16bit.png', '4/4_69_16bit.png', '4/4_70_16bit.png', '79/79_83_16bit.png', '79/79_47_16bit.png', '79/79_72_16bit.png', '79/79_53_16bit.png', '79/79_66_16bit.png', '79/79_85_16bit.png', '79/79_79_16bit.png', '79/79_58_16bit.png', '79/79_46_16bit.png', '79/79_52_16bit.png', '79/79_67_16bit.png', '79/79_74_16bit.png', '79/79_91_16bit.png', '79/79_60_16bit.png', '79/79_55_16bit.png', '79/79_88_16bit.png', '79/79_82_16bit.png', '79/79_73_16bit.png', '79/79_59_16bit.png', '79/79_78_16bit.png', '79/79_90_16bit.png', '79/79_48_16bit.png', '79/79_54_16bit.png', '79/79_89_16bit.png', '79/79_61_16bit.png', '79/79_84_16bit.png', '79/79_69_16bit.png', '79/79_75_16bit.png', '79/79_81_16bit.png', '79/79_70_16bit.png', '79/79_45_16bit.png', '79/79_51_16bit.png', '79/79_64_16bit.png', '79/79_87_16bit.png', '79/79_76_16bit.png', '79/79_62_16bit.png', '79/79_49_16bit.png', '79/79_80_16bit.png', '79/79_68_16bit.png', '79/79_57_16bit.png', '79/79_71_16bit.png', '79/79_65_16bit.png', '79/79_50_16bit.png', '79/79_44_16bit.png', '79/79_77_16bit.png', '79/79_86_16bit.png', '79/79_56_16bit.png', '79/79_63_16bit.png', '33/33_40_16bit.png', '33/33_8_16bit.png', '33/33_16_16bit.png', '33/33_41_16bit.png', '33/33_25_16bit.png', '33/33_37_16bit.png', '33/33_23_16bit.png', '33/33_28_16bit.png', '33/33_52_16bit.png', '33/33_46_16bit.png', '33/33_31_16bit.png', '33/33_10_16bit.png', '33/33_17_16bit.png', '33/33_22_16bit.png', '33/33_36_16bit.png', '33/33_9_16bit.png', '33/33_11_16bit.png', '33/33_30_16bit.png', '33/33_29_16bit.png', '33/33_24_16bit.png', '33/33_53_16bit.png', '33/33_47_16bit.png', '33/33_42_16bit.png', '33/33_19_16bit.png', '33/33_38_16bit.png', '33/33_21_16bit.png', '33/33_33_16bit.png', '33/33_14_16bit.png', '33/33_12_16bit.png', '33/33_35_16bit.png', '33/33_27_16bit.png', '33/33_44_16bit.png', '33/33_50_16bit.png', '33/33_43_16bit.png', '33/33_49_16bit.png', '33/33_39_16bit.png', '33/33_13_16bit.png', '33/33_51_16bit.png', '33/33_15_16bit.png', '33/33_34_16bit.png', '33/33_20_16bit.png', '33/33_18_16bit.png', '33/33_45_16bit.png', '33/33_48_16bit.png', '33/33_32_16bit.png', '33/33_26_16bit.png', '12/12_81_16bit.png', '12/12_76_16bit.png', '12/12_77_16bit.png', '12/12_80_16bit.png', '12/12_82_16bit.png', '12/12_74_16bit.png', '12/12_78_16bit.png', '12/12_72_16bit.png', '12/12_75_16bit.png', '12/12_73_16bit.png', '12/12_79_16bit.png', '26/26_54_16bit.png', '26/26_67_16bit.png', '26/26_59_16bit.png', '26/26_40_16bit.png', '26/26_37_16bit.png', '26/26_78_16bit.png', '26/26_61_16bit.png', '26/26_75_16bit.png', '26/26_73_16bit.png', '26/26_52_16bit.png', '26/26_41_16bit.png', '26/26_74_16bit.png', '26/26_55_16bit.png', '26/26_46_16bit.png', '26/26_58_16bit.png', '26/26_36_16bit.png', '26/26_79_16bit.png', '26/26_72_16bit.png', '26/26_60_16bit.png', '26/26_66_16bit.png', '26/26_53_16bit.png', '26/26_47_16bit.png', '26/26_63_16bit.png', '26/26_77_16bit.png', '26/26_65_16bit.png', '26/26_38_16bit.png', '26/26_35_16bit.png', '26/26_56_16bit.png', '26/26_44_16bit.png', '26/26_42_16bit.png', '26/26_50_16bit.png', '26/26_71_16bit.png', '26/26_49_16bit.png', '26/26_68_16bit.png', '26/26_62_16bit.png', '26/26_76_16bit.png', '26/26_39_16bit.png', '26/26_70_16bit.png', '26/26_45_16bit.png', '26/26_43_16bit.png', '26/26_57_16bit.png', '26/26_64_16bit.png', '26/26_51_16bit.png', '26/26_48_16bit.png', '26/26_69_16bit.png', '100/100_55_16bit.png', '100/100_47_16bit.png', '100/100_46_16bit.png', '100/100_61_16bit.png', '100/100_59_16bit.png', '100/100_54_16bit.png', '100/100_52_16bit.png', '100/100_53_16bit.png', '100/100_58_16bit.png', '100/100_60_16bit.png', '100/100_57_16bit.png', '100/100_50_16bit.png', '100/100_62_16bit.png', '100/100_48_16bit.png', '100/100_56_16bit.png', '100/100_49_16bit.png', '100/100_51_16bit.png', '53/53_70_16bit.png', '53/53_62_16bit.png', '53/53_76_16bit.png', '53/53_69_16bit.png', '53/53_64_16bit.png', '53/53_63_16bit.png', '53/53_65_16bit.png', '53/53_68_16bit.png', '53/53_77_16bit.png', '53/53_74_16bit.png', '53/53_78_16bit.png', '53/53_71_16bit.png', '53/53_72_16bit.png', '53/53_60_16bit.png', '53/53_66_16bit.png', '53/53_75_16bit.png', '53/53_61_16bit.png', '53/53_59_16bit.png', '53/53_73_16bit.png', '53/53_67_16bit.png', '22/22_70_16bit.png', '22/22_76_16bit.png', '22/22_64_16bit.png', '22/22_39_16bit.png', '22/22_43_16bit.png', '22/22_62_16bit.png', '22/22_57_16bit.png', '22/22_45_16bit.png', '22/22_51_16bit.png', '22/22_69_16bit.png', '22/22_38_16bit.png', '22/22_81_16bit.png', '22/22_48_16bit.png', '22/22_71_16bit.png', '22/22_63_16bit.png', '22/22_42_16bit.png', '22/22_86_16bit.png', '22/22_77_16bit.png', '22/22_56_16bit.png', '22/22_44_16bit.png', '22/22_50_16bit.png', '22/22_65_16bit.png', '22/22_80_16bit.png', '22/22_68_16bit.png', '22/22_74_16bit.png', '22/22_49_16bit.png', '22/22_60_16bit.png', '22/22_41_16bit.png', '22/22_55_16bit.png', '22/22_58_16bit.png', '22/22_79_16bit.png', '22/22_85_16bit.png', '22/22_53_16bit.png', '22/22_78_16bit.png', '22/22_83_16bit.png', '22/22_47_16bit.png', '22/22_72_16bit.png', '22/22_75_16bit.png', '22/22_61_16bit.png', '22/22_66_16bit.png', '22/22_54_16bit.png', '22/22_40_16bit.png', '22/22_84_16bit.png', '22/22_52_16bit.png', '22/22_46_16bit.png', '22/22_59_16bit.png', '22/22_73_16bit.png', '22/22_82_16bit.png', '22/22_67_16bit.png', '68/68_56_16bit.png', '68/68_48_16bit.png', '68/68_50_16bit.png', '68/68_44_16bit.png', '68/68_42_16bit.png', '68/68_49_16bit.png', '68/68_51_16bit.png', '68/68_43_16bit.png', '68/68_45_16bit.png', '68/68_46_16bit.png', '68/68_54_16bit.png', '68/68_47_16bit.png', '68/68_53_16bit.png', '68/68_52_16bit.png', '68/68_55_16bit.png', '44/44_67_16bit.png', '44/44_73_16bit.png', '44/44_82_16bit.png', '44/44_46_16bit.png', '44/44_84_16bit.png', '44/44_52_16bit.png', '44/44_59_16bit.png', '44/44_54_16bit.png', '44/44_78_16bit.png', '44/44_40_16bit.png', '44/44_75_16bit.png', '44/44_89_16bit.png', '44/44_61_16bit.png', '44/44_83_16bit.png', '44/44_66_16bit.png', '44/44_58_16bit.png', '44/44_47_16bit.png', '44/44_85_16bit.png', '44/44_72_16bit.png', '44/44_53_16bit.png', '44/44_79_16bit.png', '44/44_41_16bit.png', '44/44_88_16bit.png', '44/44_55_16bit.png', '44/44_65_16bit.png', '44/44_60_16bit.png', '44/44_80_16bit.png', '44/44_68_16bit.png', '44/44_74_16bit.png', '44/44_49_16bit.png', '44/44_50_16bit.png', '44/44_71_16bit.png', '44/44_44_16bit.png', '44/44_86_16bit.png', '44/44_56_16bit.png', '44/44_77_16bit.png', '44/44_63_16bit.png', '44/44_69_16bit.png', '44/44_42_16bit.png', '44/44_48_16bit.png', '44/44_51_16bit.png', '44/44_45_16bit.png', '44/44_81_16bit.png', '44/44_64_16bit.png', '44/44_76_16bit.png', '44/44_70_16bit.png', '44/44_87_16bit.png', '44/44_43_16bit.png', '44/44_57_16bit.png', '44/44_39_16bit.png', '44/44_62_16bit.png', '98/98_61_16bit.png', '98/98_67_16bit.png', '98/98_82_16bit.png', '98/98_73_16bit.png', '98/98_75_16bit.png', '98/98_89_16bit.png', '98/98_84_16bit.png', '98/98_72_16bit.png', '98/98_59_16bit.png', '98/98_90_16bit.png', '98/98_83_16bit.png', '98/98_78_16bit.png', '98/98_66_16bit.png', '98/98_60_16bit.png', '98/98_88_16bit.png', '98/98_74_16bit.png', '98/98_85_16bit.png', '98/98_91_16bit.png', '98/98_58_16bit.png', '98/98_65_16bit.png', '98/98_79_16bit.png', '98/98_77_16bit.png', '98/98_71_16bit.png', '98/98_80_16bit.png', '98/98_68_16bit.png', '98/98_63_16bit.png', '98/98_86_16bit.png', '98/98_64_16bit.png', '98/98_70_16bit.png', '98/98_81_16bit.png', '98/98_87_16bit.png', '98/98_69_16bit.png', '98/98_76_16bit.png', '98/98_62_16bit.png', '15/15_32_16bit.png', '15/15_13_16bit.png', '15/15_26_16bit.png', '15/15_18_16bit.png', '15/15_20_16bit.png', '15/15_15_16bit.png', '15/15_21_16bit.png', '15/15_24_16bit.png', '15/15_27_16bit.png', '15/15_19_16bit.png', '15/15_14_16bit.png', '15/15_12_16bit.png', '15/15_30_16bit.png', '15/15_29_16bit.png', '15/15_11_16bit.png', '15/15_17_16bit.png', '15/15_22_16bit.png', '15/15_16_16bit.png', '15/15_46_16bit.png', '15/15_28_16bit.png', '15/15_31_16bit.png', '15/15_25_16bit.png', '15/15_8_16bit.png', '15/15_10_16bit.png', '15/15_9_16bit.png', '15/15_23_16bit.png', '73/73_28_16bit.png', '73/73_37_16bit.png', '73/73_23_16bit.png', '73/73_25_16bit.png', '73/73_22_16bit.png', '73/73_36_16bit.png', '73/73_31_16bit.png', '73/73_24_16bit.png', '73/73_19_16bit.png', '73/73_17_16bit.png', '73/73_38_16bit.png', '73/73_29_16bit.png', '73/73_30_16bit.png', '73/73_35_16bit.png', '73/73_33_16bit.png', '73/73_21_16bit.png', '73/73_27_16bit.png', '73/73_32_16bit.png', '73/73_39_16bit.png', '73/73_18_16bit.png', '73/73_20_16bit.png', '73/73_34_16bit.png', '73/73_26_16bit.png', '39/39_47_16bit.png', '39/39_72_16bit.png', '39/39_66_16bit.png', '39/39_83_16bit.png', '39/39_53_16bit.png', '39/39_36_16bit.png', '39/39_58_16bit.png', '39/39_55_16bit.png', '39/39_85_16bit.png', '39/39_79_16bit.png', '39/39_73_16bit.png', '39/39_82_16bit.png', '39/39_60_16bit.png', '39/39_67_16bit.png', '39/39_74_16bit.png', '39/39_41_16bit.png', '39/39_52_16bit.png', '39/39_59_16bit.png', '39/39_46_16bit.png', '39/39_37_16bit.png', '39/39_48_16bit.png', '39/39_75_16bit.png', '39/39_78_16bit.png', '39/39_61_16bit.png', '39/39_84_16bit.png', '39/39_54_16bit.png', '39/39_40_16bit.png', '39/39_81_16bit.png', '39/39_69_16bit.png', '39/39_45_16bit.png', '39/39_76_16bit.png', '39/39_70_16bit.png', '39/39_51_16bit.png', '39/39_39_16bit.png', '39/39_80_16bit.png', '39/39_57_16bit.png', '39/39_64_16bit.png', '39/39_62_16bit.png', '39/39_43_16bit.png', '39/39_50_16bit.png', '39/39_49_16bit.png', '39/39_68_16bit.png', '39/39_44_16bit.png', '39/39_42_16bit.png', '39/39_65_16bit.png', '39/39_56_16bit.png', '39/39_63_16bit.png', '39/39_71_16bit.png', '39/39_86_16bit.png', '39/39_77_16bit.png', '39/39_38_16bit.png', '9/9_66_16bit.png', '9/9_72_16bit.png', '9/9_60_16bit.png', '9/9_53_16bit.png', '9/9_79_16bit.png', '9/9_58_16bit.png', '9/9_55_16bit.png', '9/9_47_16bit.png', '9/9_74_16bit.png', '9/9_41_16bit.png', '9/9_73_16bit.png', '9/9_75_16bit.png', '9/9_59_16bit.png', '9/9_78_16bit.png', '9/9_46_16bit.png', '9/9_67_16bit.png', '9/9_52_16bit.png', '9/9_37_16bit.png', '9/9_54_16bit.png', '9/9_40_16bit.png', '9/9_69_16bit.png', '9/9_51_16bit.png', '9/9_61_16bit.png', '9/9_48_16bit.png', '9/9_45_16bit.png', '9/9_62_16bit.png', '9/9_76_16bit.png', '9/9_70_16bit.png', '9/9_57_16bit.png', '9/9_64_16bit.png', '9/9_43_16bit.png', '9/9_80_16bit.png', '9/9_39_16bit.png', '9/9_49_16bit.png', '9/9_63_16bit.png', '9/9_71_16bit.png', '9/9_44_16bit.png', '9/9_65_16bit.png', '9/9_68_16bit.png', '9/9_50_16bit.png', '9/9_77_16bit.png', '9/9_38_16bit.png', '9/9_42_16bit.png', '9/9_56_16bit.png', '84/84_42_16bit.png', '84/84_38_16bit.png', '84/84_35_16bit.png', '84/84_49_16bit.png', '84/84_33_16bit.png', '84/84_39_16bit.png', '84/84_43_16bit.png', '84/84_44_16bit.png', '84/84_34_16bit.png', '84/84_40_16bit.png', '84/84_46_16bit.png', '84/84_45_16bit.png', '84/84_36_16bit.png', '84/84_37_16bit.png', '84/84_48_16bit.png', '84/84_47_16bit.png', '84/84_41_16bit.png']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VUXJZnvfbXOB","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Os4ta5im257W","colab_type":"code","outputId":"c12df393-f20c-4854-ccb4-d3a140c95ce2","executionInfo":{"status":"ok","timestamp":1574846582252,"user_tz":-60,"elapsed":121464,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":717}},"source":["device='cuda:0'\n","model.cuda()\n","predicted_label = list()\n","real_label = list()\n","\n","#Set the network in eval mode\n","model.eval()\n","with torch.no_grad(): # torch.no_grad() disables the autograd machinery, thus not saving the intermediate activations\n","  # Loop over the dataset\n","  for batch_idx, (inputs, targets) in enumerate(test_dataloader):\n","    inputs = inputs.to(device)\n","    _, featrues_x = autoencoder(Variable(inputs))\n","\n","    featrues_x = featrues_x.view(featrues_x.size(0),64)\n","    outputs = model(featrues_x)\n","    outputs = outputs.view(outputs.size(0), -1) \n","\n","    arr1 = outputs.data.cpu().numpy()\n","    print(arr1.shape)\n","    #predicted_label += arr1\n","    arr2 = targets.data.cpu().numpy()\n","    #real_label += arr2\n","\n","\n","    predicted_label.extend(arr1)\n","    real_label.extend(arr2)\n"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7f8a28171710>>\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 926, in __del__\n","    self._shutdown_workers()\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 906, in _shutdown_workers\n","    w.join()\n","  File \"/usr/lib/python3.6/multiprocessing/process.py\", line 122, in join\n","    assert self._parent_pid == os.getpid(), 'can only join a child process'\n","AssertionError: can only join a child process\n"],"name":"stderr"},{"output_type":"stream","text":["(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(32, 1)\n","(31, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ynFjo4UhQGJ2","colab_type":"code","outputId":"eed130e3-f9a2-4fa4-ed6f-7e4edd219962","executionInfo":{"status":"ok","timestamp":1574847530665,"user_tz":-60,"elapsed":1083,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["len(predicted_label)\n","type(predicted_label[0])\n","\n","predicted = list()\n","\n","for elem in predicted_label:\n","  print (elem[0])\n","  predicted.append(elem[0])\n","\n","print(len(predicted))"],"execution_count":27,"outputs":[{"output_type":"stream","text":["70.794815\n","73.85732\n","77.22018\n","71.66704\n","74.02495\n","75.233765\n","73.597824\n","75.59694\n","73.82428\n","71.02369\n","75.805466\n","71.75688\n","71.559235\n","76.69016\n","70.55434\n","73.124825\n","77.07772\n","69.28433\n","70.760635\n","73.41396\n","77.00494\n","76.573074\n","69.88717\n","72.38285\n","70.04803\n","77.06434\n","71.69161\n","69.93944\n","75.97405\n","75.62128\n","74.494064\n","74.62574\n","74.15167\n","69.69031\n","71.115685\n","73.15128\n","74.065865\n","73.11334\n","75.29773\n","72.935646\n","73.49765\n","74.3976\n","72.581154\n","75.511986\n","73.43306\n","75.38562\n","76.09101\n","77.40077\n","72.32681\n","72.16922\n","71.742874\n","74.47522\n","73.23881\n","73.55382\n","71.8923\n","73.818474\n","73.22152\n","74.09571\n","69.521774\n","70.69973\n","73.05042\n","73.93531\n","74.48961\n","74.7713\n","75.63902\n","68.186134\n","76.620285\n","75.70557\n","70.796036\n","70.960075\n","77.96105\n","73.68684\n","70.25946\n","73.94405\n","77.582596\n","76.57902\n","70.24388\n","75.65986\n","75.04787\n","72.88532\n","72.194695\n","73.74927\n","70.83479\n","70.722115\n","72.84935\n","75.152985\n","69.10344\n","70.65837\n","68.49269\n","70.26983\n","76.45246\n","76.422676\n","70.43068\n","73.59726\n","73.39284\n","70.521996\n","70.56371\n","72.59939\n","72.5926\n","68.92399\n","69.96215\n","68.50283\n","75.03476\n","71.17657\n","72.136566\n","70.5832\n","75.5624\n","68.982666\n","74.03653\n","69.74193\n","72.58795\n","71.63862\n","69.02439\n","70.30722\n","74.51035\n","70.44189\n","71.33297\n","75.07899\n","69.73181\n","74.18148\n","71.307175\n","73.088806\n","74.82249\n","75.75669\n","78.15338\n","73.520996\n","74.82128\n","76.88672\n","73.130516\n","74.49904\n","77.70365\n","76.168205\n","73.94721\n","74.0408\n","74.777596\n","75.6263\n","73.88742\n","75.30526\n","73.59032\n","73.955826\n","77.13583\n","73.35566\n","73.51217\n","76.377556\n","70.78543\n","75.91752\n","72.92405\n","70.805466\n","77.26461\n","74.208534\n","75.328575\n","74.876686\n","73.11088\n","72.36188\n","73.91712\n","74.957596\n","71.008995\n","72.427025\n","75.69573\n","74.51597\n","69.97352\n","74.66068\n","74.86876\n","71.66929\n","70.11735\n","71.383064\n","74.74503\n","74.234764\n","74.84138\n","69.321106\n","72.92647\n","70.94076\n","76.55319\n","69.20404\n","73.59663\n","70.31262\n","72.36674\n","75.298515\n","74.31442\n","75.580376\n","75.41439\n","75.14847\n","71.32507\n","71.644066\n","74.73523\n","72.30662\n","75.18935\n","69.4354\n","69.81361\n","73.240906\n","76.14946\n","72.11434\n","71.293396\n","70.46044\n","74.37669\n","75.00458\n","69.8738\n","72.39113\n","74.12949\n","69.79593\n","71.59412\n","74.92884\n","70.796196\n","69.13444\n","69.89039\n","70.306305\n","76.14299\n","74.4842\n","66.95434\n","74.189186\n","73.587944\n","76.49058\n","74.55611\n","72.82012\n","68.407166\n","69.20998\n","75.785324\n","77.03442\n","75.3829\n","79.55282\n","73.31041\n","71.61906\n","69.85532\n","70.72028\n","70.95313\n","70.92987\n","75.44671\n","68.527954\n","70.3353\n","70.72145\n","69.60131\n","72.97683\n","70.44374\n","69.22882\n","69.850006\n","70.58775\n","70.97544\n","75.877396\n","69.35111\n","71.148865\n","71.83533\n","75.31476\n","73.44707\n","71.02689\n","69.66867\n","72.36164\n","75.00849\n","70.578804\n","70.669205\n","72.389854\n","70.09437\n","66.365036\n","70.12025\n","69.450516\n","70.16157\n","68.08457\n","70.17168\n","71.90715\n","70.34208\n","68.29099\n","66.73717\n","68.765625\n","72.13059\n","68.92181\n","71.012665\n","73.13289\n","70.86261\n","69.07717\n","70.753555\n","69.93007\n","70.01165\n","68.58979\n","70.761375\n","69.04437\n","67.47846\n","70.63629\n","70.09747\n","68.112366\n","66.982216\n","70.755264\n","69.80092\n","71.602486\n","71.93626\n","71.229935\n","74.88093\n","70.2392\n","72.86777\n","70.995384\n","72.29872\n","74.385056\n","75.02508\n","71.77465\n","71.19784\n","71.98987\n","73.50931\n","72.20154\n","72.93921\n","71.96798\n","76.500534\n","76.05786\n","70.403824\n","72.07129\n","73.9767\n","73.33432\n","77.00346\n","74.44398\n","73.90345\n","72.89399\n","74.34838\n","70.993454\n","75.430016\n","72.55646\n","72.414825\n","71.03928\n","74.215\n","72.44661\n","71.37209\n","72.97991\n","71.40329\n","72.236786\n","72.05903\n","70.84353\n","72.53409\n","75.11329\n","72.3544\n","72.38922\n","73.75414\n","71.87779\n","66.64316\n","72.66046\n","66.06186\n","76.104004\n","74.37344\n","68.93428\n","68.48236\n","76.41927\n","72.14077\n","66.986626\n","71.42558\n","76.06024\n","70.16945\n","70.95184\n","74.91166\n","66.07653\n","70.16762\n","75.13461\n","71.10757\n","70.68407\n","71.094154\n","74.22616\n","67.42367\n","73.918\n","69.75447\n","74.465645\n","71.24991\n","75.77996\n","71.771065\n","74.62171\n","75.71964\n","74.1141\n","74.82323\n","73.08349\n","75.23961\n","76.70989\n","75.461586\n","74.26103\n","70.54926\n","74.93645\n","75.494644\n","73.79565\n","75.827385\n","74.30707\n","75.07834\n","72.23936\n","76.910194\n","77.16536\n","76.81031\n","78.912415\n","76.73478\n","76.73629\n","73.83188\n","76.7677\n","74.65575\n","78.10895\n","70.55342\n","73.597404\n","74.18454\n","76.05118\n","77.285095\n","72.69285\n","73.36075\n","74.24361\n","78.18797\n","74.67359\n","75.63587\n","70.576515\n","70.47141\n","74.582184\n","68.279724\n","69.55959\n","76.98656\n","71.132164\n","69.67704\n","73.09536\n","75.79949\n","67.214806\n","74.72961\n","75.52266\n","70.95762\n","75.323586\n","68.8573\n","74.655655\n","73.38203\n","70.39413\n","70.52093\n","68.76059\n","71.9945\n","76.61353\n","75.43955\n","76.23089\n","70.436386\n","69.54964\n","76.32456\n","72.6953\n","70.06113\n","71.144356\n","70.931305\n","75.10113\n","72.20249\n","75.43813\n","68.02856\n","78.821144\n","71.56316\n","77.198616\n","78.50647\n","71.497856\n","69.534546\n","75.587204\n","76.4824\n","72.99287\n","73.151306\n","77.45773\n","74.74576\n","74.518135\n","71.75706\n","72.88829\n","68.52996\n","76.63364\n","71.377014\n","68.72864\n","78.19719\n","75.78096\n","76.469376\n","70.74153\n","73.884224\n","74.04288\n","76.50461\n","70.71385\n","74.1422\n","72.35727\n","74.28327\n","73.65319\n","76.96511\n","75.94578\n","68.72342\n","71.85229\n","74.20839\n","76.58853\n","69.99302\n","70.53326\n","73.563095\n","71.44372\n","70.03214\n","71.41204\n","72.041145\n","75.16736\n","75.21819\n","72.58468\n","70.9419\n","70.75147\n","74.894554\n","75.31465\n","73.061165\n","73.21687\n","71.22898\n","68.81812\n","71.9942\n","70.93202\n","75.16275\n","72.24886\n","71.605965\n","76.99666\n","68.97197\n","72.65466\n","69.687126\n","69.345474\n","74.67702\n","72.71221\n","75.5828\n","69.03229\n","72.20045\n","74.94602\n","71.843254\n","74.15018\n","78.281624\n","75.024345\n","69.898735\n","73.26081\n","73.82048\n","75.045\n","69.72357\n","75.26013\n","73.56936\n","73.00891\n","68.543594\n","77.1631\n","72.27581\n","70.12612\n","75.26497\n","70.603004\n","75.23972\n","74.94192\n","71.00206\n","75.78386\n","73.403694\n","71.624886\n","74.58264\n","69.02965\n","74.675415\n","76.151596\n","76.70147\n","72.171486\n","75.92341\n","72.12343\n","75.75449\n","76.72485\n","69.41144\n","71.32658\n","75.06536\n","75.270676\n","72.22786\n","75.9676\n","70.12766\n","74.50293\n","76.08437\n","70.0152\n","72.31246\n","67.836784\n","76.16836\n","73.26874\n","70.22175\n","71.46099\n","72.18633\n","74.84993\n","74.50166\n","71.02439\n","75.759895\n","73.47396\n","70.19844\n","74.92806\n","72.41567\n","74.48071\n","71.069565\n","70.050545\n","68.21771\n","77.65959\n","73.52511\n","74.21602\n","73.32844\n","69.45921\n","69.93488\n","75.00642\n","73.93391\n","72.28015\n","74.8664\n","72.788666\n","71.31814\n","71.512505\n","69.44467\n","74.12471\n","71.12231\n","72.60042\n","74.09148\n","74.45257\n","70.97691\n","70.95447\n","73.15098\n","70.79491\n","68.9722\n","74.422\n","74.32799\n","69.94883\n","70.98763\n","75.034386\n","72.72849\n","77.073044\n","74.70342\n","77.016396\n","71.87568\n","69.22161\n","74.7018\n","69.19415\n","72.934975\n","72.95732\n","69.70003\n","70.29707\n","70.25243\n","70.102104\n","67.15722\n","72.63686\n","69.483925\n","70.21476\n","67.29482\n","66.1455\n","73.23035\n","68.950615\n","70.234375\n","69.29911\n","69.07763\n","67.728096\n","67.068855\n","67.356316\n","71.639534\n","69.32852\n","73.99111\n","73.76415\n","67.38672\n","71.83867\n","72.6925\n","70.08596\n","67.16192\n","69.946846\n","70.99029\n","66.94394\n","73.69209\n","72.51954\n","68.61946\n","71.91326\n","69.8877\n","67.37527\n","69.09073\n","70.19155\n","72.52848\n","66.581696\n","73.993\n","73.98455\n","72.10679\n","66.58923\n","70.59559\n","76.102425\n","74.964226\n","75.58293\n","70.64988\n","66.60662\n","73.03301\n","79.195305\n","66.29131\n","75.0429\n","70.29621\n","75.267654\n","74.20243\n","68.7819\n","78.40919\n","71.322334\n","73.527275\n","74.05103\n","76.44233\n","76.82919\n","71.22351\n","71.817795\n","69.94636\n","73.478874\n","71.136856\n","71.160866\n","76.82166\n","72.30909\n","71.340065\n","76.56405\n","73.38454\n","76.35614\n","74.32835\n","71.96255\n","69.81596\n","73.26087\n","72.14945\n","73.30089\n","71.958046\n","74.29436\n","73.62906\n","69.423706\n","71.541115\n","71.75278\n","75.39129\n","68.315674\n","69.42871\n","77.10049\n","72.25526\n","71.301056\n","70.45611\n","72.34619\n","71.610886\n","71.96173\n","74.219894\n","70.818794\n","73.0229\n","70.77433\n","73.93234\n","75.31379\n","72.76337\n","73.06425\n","74.472275\n","70.202644\n","70.715675\n","73.76986\n","69.7153\n","70.994705\n","72.883156\n","72.26401\n","69.007675\n","74.919556\n","73.92393\n","71.78031\n","72.41509\n","70.516815\n","74.149315\n","72.13111\n","74.624466\n","69.75407\n","70.735916\n","73.384\n","70.972046\n","75.66068\n","74.517395\n","71.937904\n","75.77446\n","77.58368\n","69.792854\n","70.854095\n","71.93453\n","72.06086\n","70.957504\n","71.70045\n","71.71031\n","76.21415\n","70.731445\n","77.4446\n","70.671455\n","72.84841\n","74.94881\n","69.84896\n","73.1325\n","71.953316\n","73.224785\n","67.986824\n","70.60756\n","75.529594\n","73.280975\n","73.36197\n","69.36884\n","71.75422\n","76.21568\n","74.277054\n","70.47024\n","70.1465\n","72.64498\n","72.103035\n","73.02015\n","70.382645\n","71.47775\n","70.64781\n","72.77196\n","65.65708\n","70.042366\n","69.74203\n","74.12988\n","73.125244\n","68.49153\n","75.21372\n","73.61583\n","73.93563\n","68.6298\n","73.27774\n","73.15114\n","71.67247\n","72.30109\n","76.02642\n","75.04542\n","67.47545\n","70.97966\n","67.18197\n","72.46832\n","70.225655\n","75.055435\n","71.852516\n","75.746925\n","72.89656\n","72.585396\n","75.23945\n","66.63235\n","73.313446\n","70.94441\n","67.3657\n","68.88915\n","73.10054\n","70.64452\n","74.029564\n","69.33913\n","69.682076\n","75.53972\n","74.549385\n","68.93554\n","73.02432\n","65.59662\n","68.08054\n","74.15356\n","76.44561\n","69.67846\n","70.9127\n","74.38276\n","68.9021\n","74.558525\n","75.239525\n","67.34628\n","75.01246\n","72.85404\n","66.147545\n","65.69752\n","74.61945\n","69.09855\n","71.16235\n","72.79703\n","72.423\n","72.20399\n","73.89054\n","72.14682\n","74.662\n","72.0597\n","71.98827\n","75.55767\n","75.67652\n","78.13206\n","74.95695\n","74.70659\n","74.41632\n","74.38952\n","72.99407\n","74.214745\n","74.871735\n","77.71307\n","73.45014\n","72.71832\n","74.795494\n","73.29119\n","72.4328\n","72.81834\n","70.463104\n","73.22294\n","71.0319\n","75.89251\n","76.47886\n","75.021645\n","71.50337\n","70.08978\n","78.89808\n","75.63402\n","75.49151\n","71.39299\n","71.99269\n","74.46447\n","74.25378\n","71.09719\n","74.87899\n","71.91548\n","70.225\n","69.03411\n","71.68955\n","74.34295\n","70.65151\n","77.24611\n","77.1333\n","70.48575\n","73.04901\n","69.81669\n","70.871605\n","74.574486\n","72.983025\n","74.13499\n","67.994774\n","74.50126\n","69.43082\n","69.907\n","76.91552\n","74.747345\n","70.48619\n","76.87261\n","73.51599\n","74.52867\n","76.15699\n","69.6507\n","76.81955\n","69.208466\n","69.24873\n","76.41664\n","69.99646\n","71.166725\n","69.37915\n","68.32955\n","74.4931\n","77.11674\n","69.20837\n","69.99012\n","72.20895\n","70.73095\n","70.34075\n","70.6086\n","73.43742\n","74.37725\n","75.745445\n","75.78159\n","74.57627\n","72.00796\n","73.82698\n","69.53107\n","71.78284\n","74.98196\n","73.375916\n","75.15601\n","69.6291\n","68.204285\n","68.57272\n","72.26042\n","69.69526\n","74.06513\n","74.770744\n","70.18837\n","74.73155\n","75.0114\n","76.65325\n","71.801414\n","73.99058\n","71.52052\n","70.39127\n","72.787636\n","73.37484\n","76.92907\n","72.03455\n","74.97294\n","70.66279\n","73.41023\n","70.3338\n","70.866974\n","75.311966\n","73.06116\n","76.49547\n","75.808075\n","74.32273\n","71.37369\n","70.45851\n","75.07794\n","72.99307\n","74.68394\n","72.63975\n","71.13087\n","75.63234\n","77.33802\n","72.208565\n","74.17443\n","72.38355\n","72.95929\n","75.36131\n","71.35211\n","72.400444\n","74.50266\n","73.93683\n","73.34714\n","73.54857\n","75.49533\n","69.531784\n","69.847176\n","74.04847\n","72.38313\n","71.61311\n","69.924164\n","73.50463\n","72.644356\n","69.84523\n","76.303635\n","76.273766\n","69.5616\n","67.5265\n","73.31319\n","991\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wdQuJ2sF5HWC","colab_type":"code","outputId":"57e7eb96-bbc9-4635-b288-296dcedf9a4c","executionInfo":{"status":"ok","timestamp":1574847551372,"user_tz":-60,"elapsed":1765,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":768}},"source":["print (predicted_label)\n","\n","import numpy as np\n","predicted_label = np.array(predicted,dtype=int)\n","\n","print(predicted_label)"],"execution_count":28,"outputs":[{"output_type":"stream","text":["[array([70.794815], dtype=float32), array([73.85732], dtype=float32), array([77.22018], dtype=float32), array([71.66704], dtype=float32), array([74.02495], dtype=float32), array([75.233765], dtype=float32), array([73.597824], dtype=float32), array([75.59694], dtype=float32), array([73.82428], dtype=float32), array([71.02369], dtype=float32), array([75.805466], dtype=float32), array([71.75688], dtype=float32), array([71.559235], dtype=float32), array([76.69016], dtype=float32), array([70.55434], dtype=float32), array([73.124825], dtype=float32), array([77.07772], dtype=float32), array([69.28433], dtype=float32), array([70.760635], dtype=float32), array([73.41396], dtype=float32), array([77.00494], dtype=float32), array([76.573074], dtype=float32), array([69.88717], dtype=float32), array([72.38285], dtype=float32), array([70.04803], dtype=float32), array([77.06434], dtype=float32), array([71.69161], dtype=float32), array([69.93944], dtype=float32), array([75.97405], dtype=float32), array([75.62128], dtype=float32), array([74.494064], dtype=float32), array([74.62574], dtype=float32), array([74.15167], dtype=float32), array([69.69031], dtype=float32), array([71.115685], dtype=float32), array([73.15128], dtype=float32), array([74.065865], dtype=float32), array([73.11334], dtype=float32), array([75.29773], dtype=float32), array([72.935646], dtype=float32), array([73.49765], dtype=float32), array([74.3976], dtype=float32), array([72.581154], dtype=float32), array([75.511986], dtype=float32), array([73.43306], dtype=float32), array([75.38562], dtype=float32), array([76.09101], dtype=float32), array([77.40077], dtype=float32), array([72.32681], dtype=float32), array([72.16922], dtype=float32), array([71.742874], dtype=float32), array([74.47522], dtype=float32), array([73.23881], dtype=float32), array([73.55382], dtype=float32), array([71.8923], dtype=float32), array([73.818474], dtype=float32), array([73.22152], dtype=float32), array([74.09571], dtype=float32), array([69.521774], dtype=float32), array([70.69973], dtype=float32), array([73.05042], dtype=float32), array([73.93531], dtype=float32), array([74.48961], dtype=float32), array([74.7713], dtype=float32), array([75.63902], dtype=float32), array([68.186134], dtype=float32), array([76.620285], dtype=float32), array([75.70557], dtype=float32), array([70.796036], dtype=float32), array([70.960075], dtype=float32), array([77.96105], dtype=float32), array([73.68684], dtype=float32), array([70.25946], dtype=float32), array([73.94405], dtype=float32), array([77.582596], dtype=float32), array([76.57902], dtype=float32), array([70.24388], dtype=float32), array([75.65986], dtype=float32), array([75.04787], dtype=float32), array([72.88532], dtype=float32), array([72.194695], dtype=float32), array([73.74927], dtype=float32), array([70.83479], dtype=float32), array([70.722115], dtype=float32), array([72.84935], dtype=float32), array([75.152985], dtype=float32), array([69.10344], dtype=float32), array([70.65837], dtype=float32), array([68.49269], dtype=float32), array([70.26983], dtype=float32), array([76.45246], dtype=float32), array([76.422676], dtype=float32), array([70.43068], dtype=float32), array([73.59726], dtype=float32), array([73.39284], dtype=float32), array([70.521996], dtype=float32), array([70.56371], dtype=float32), array([72.59939], dtype=float32), array([72.5926], dtype=float32), array([68.92399], dtype=float32), array([69.96215], dtype=float32), array([68.50283], dtype=float32), array([75.03476], dtype=float32), array([71.17657], dtype=float32), array([72.136566], dtype=float32), array([70.5832], dtype=float32), array([75.5624], dtype=float32), array([68.982666], dtype=float32), array([74.03653], dtype=float32), array([69.74193], dtype=float32), array([72.58795], dtype=float32), array([71.63862], dtype=float32), array([69.02439], dtype=float32), array([70.30722], dtype=float32), array([74.51035], dtype=float32), array([70.44189], dtype=float32), array([71.33297], dtype=float32), array([75.07899], dtype=float32), array([69.73181], dtype=float32), array([74.18148], dtype=float32), array([71.307175], dtype=float32), array([73.088806], dtype=float32), array([74.82249], dtype=float32), array([75.75669], dtype=float32), array([78.15338], dtype=float32), array([73.520996], dtype=float32), array([74.82128], dtype=float32), array([76.88672], dtype=float32), array([73.130516], dtype=float32), array([74.49904], dtype=float32), array([77.70365], dtype=float32), array([76.168205], dtype=float32), array([73.94721], dtype=float32), array([74.0408], dtype=float32), array([74.777596], dtype=float32), array([75.6263], dtype=float32), array([73.88742], dtype=float32), array([75.30526], dtype=float32), array([73.59032], dtype=float32), array([73.955826], dtype=float32), array([77.13583], dtype=float32), array([73.35566], dtype=float32), array([73.51217], dtype=float32), array([76.377556], dtype=float32), array([70.78543], dtype=float32), array([75.91752], dtype=float32), array([72.92405], dtype=float32), array([70.805466], dtype=float32), array([77.26461], dtype=float32), array([74.208534], dtype=float32), array([75.328575], dtype=float32), array([74.876686], dtype=float32), array([73.11088], dtype=float32), array([72.36188], dtype=float32), array([73.91712], dtype=float32), array([74.957596], dtype=float32), array([71.008995], dtype=float32), array([72.427025], dtype=float32), array([75.69573], dtype=float32), array([74.51597], dtype=float32), array([69.97352], dtype=float32), array([74.66068], dtype=float32), array([74.86876], dtype=float32), array([71.66929], dtype=float32), array([70.11735], dtype=float32), array([71.383064], dtype=float32), array([74.74503], dtype=float32), array([74.234764], dtype=float32), array([74.84138], dtype=float32), array([69.321106], dtype=float32), array([72.92647], dtype=float32), array([70.94076], dtype=float32), array([76.55319], dtype=float32), array([69.20404], dtype=float32), array([73.59663], dtype=float32), array([70.31262], dtype=float32), array([72.36674], dtype=float32), array([75.298515], dtype=float32), array([74.31442], dtype=float32), array([75.580376], dtype=float32), array([75.41439], dtype=float32), array([75.14847], dtype=float32), array([71.32507], dtype=float32), array([71.644066], dtype=float32), array([74.73523], dtype=float32), array([72.30662], dtype=float32), array([75.18935], dtype=float32), array([69.4354], dtype=float32), array([69.81361], dtype=float32), array([73.240906], dtype=float32), array([76.14946], dtype=float32), array([72.11434], dtype=float32), array([71.293396], dtype=float32), array([70.46044], dtype=float32), array([74.37669], dtype=float32), array([75.00458], dtype=float32), array([69.8738], dtype=float32), array([72.39113], dtype=float32), array([74.12949], dtype=float32), array([69.79593], dtype=float32), array([71.59412], dtype=float32), array([74.92884], dtype=float32), array([70.796196], dtype=float32), array([69.13444], dtype=float32), array([69.89039], dtype=float32), array([70.306305], dtype=float32), array([76.14299], dtype=float32), array([74.4842], dtype=float32), array([66.95434], dtype=float32), array([74.189186], dtype=float32), array([73.587944], dtype=float32), array([76.49058], dtype=float32), array([74.55611], dtype=float32), array([72.82012], dtype=float32), array([68.407166], dtype=float32), array([69.20998], dtype=float32), array([75.785324], dtype=float32), array([77.03442], dtype=float32), array([75.3829], dtype=float32), array([79.55282], dtype=float32), array([73.31041], dtype=float32), array([71.61906], dtype=float32), array([69.85532], dtype=float32), array([70.72028], dtype=float32), array([70.95313], dtype=float32), array([70.92987], dtype=float32), array([75.44671], dtype=float32), array([68.527954], dtype=float32), array([70.3353], dtype=float32), array([70.72145], dtype=float32), array([69.60131], dtype=float32), array([72.97683], dtype=float32), array([70.44374], dtype=float32), array([69.22882], dtype=float32), array([69.850006], dtype=float32), array([70.58775], dtype=float32), array([70.97544], dtype=float32), array([75.877396], dtype=float32), array([69.35111], dtype=float32), array([71.148865], dtype=float32), array([71.83533], dtype=float32), array([75.31476], dtype=float32), array([73.44707], dtype=float32), array([71.02689], dtype=float32), array([69.66867], dtype=float32), array([72.36164], dtype=float32), array([75.00849], dtype=float32), array([70.578804], dtype=float32), array([70.669205], dtype=float32), array([72.389854], dtype=float32), array([70.09437], dtype=float32), array([66.365036], dtype=float32), array([70.12025], dtype=float32), array([69.450516], dtype=float32), array([70.16157], dtype=float32), array([68.08457], dtype=float32), array([70.17168], dtype=float32), array([71.90715], dtype=float32), array([70.34208], dtype=float32), array([68.29099], dtype=float32), array([66.73717], dtype=float32), array([68.765625], dtype=float32), array([72.13059], dtype=float32), array([68.92181], dtype=float32), array([71.012665], dtype=float32), array([73.13289], dtype=float32), array([70.86261], dtype=float32), array([69.07717], dtype=float32), array([70.753555], dtype=float32), array([69.93007], dtype=float32), array([70.01165], dtype=float32), array([68.58979], dtype=float32), array([70.761375], dtype=float32), array([69.04437], dtype=float32), array([67.47846], dtype=float32), array([70.63629], dtype=float32), array([70.09747], dtype=float32), array([68.112366], dtype=float32), array([66.982216], dtype=float32), array([70.755264], dtype=float32), array([69.80092], dtype=float32), array([71.602486], dtype=float32), array([71.93626], dtype=float32), array([71.229935], dtype=float32), array([74.88093], dtype=float32), array([70.2392], dtype=float32), array([72.86777], dtype=float32), array([70.995384], dtype=float32), array([72.29872], dtype=float32), array([74.385056], dtype=float32), array([75.02508], dtype=float32), array([71.77465], dtype=float32), array([71.19784], dtype=float32), array([71.98987], dtype=float32), array([73.50931], dtype=float32), array([72.20154], dtype=float32), array([72.93921], dtype=float32), array([71.96798], dtype=float32), array([76.500534], dtype=float32), array([76.05786], dtype=float32), array([70.403824], dtype=float32), array([72.07129], dtype=float32), array([73.9767], dtype=float32), array([73.33432], dtype=float32), array([77.00346], dtype=float32), array([74.44398], dtype=float32), array([73.90345], dtype=float32), array([72.89399], dtype=float32), array([74.34838], dtype=float32), array([70.993454], dtype=float32), array([75.430016], dtype=float32), array([72.55646], dtype=float32), array([72.414825], dtype=float32), array([71.03928], dtype=float32), array([74.215], dtype=float32), array([72.44661], dtype=float32), array([71.37209], dtype=float32), array([72.97991], dtype=float32), array([71.40329], dtype=float32), array([72.236786], dtype=float32), array([72.05903], dtype=float32), array([70.84353], dtype=float32), array([72.53409], dtype=float32), array([75.11329], dtype=float32), array([72.3544], dtype=float32), array([72.38922], dtype=float32), array([73.75414], dtype=float32), array([71.87779], dtype=float32), array([66.64316], dtype=float32), array([72.66046], dtype=float32), array([66.06186], dtype=float32), array([76.104004], dtype=float32), array([74.37344], dtype=float32), array([68.93428], dtype=float32), array([68.48236], dtype=float32), array([76.41927], dtype=float32), array([72.14077], dtype=float32), array([66.986626], dtype=float32), array([71.42558], dtype=float32), array([76.06024], dtype=float32), array([70.16945], dtype=float32), array([70.95184], dtype=float32), array([74.91166], dtype=float32), array([66.07653], dtype=float32), array([70.16762], dtype=float32), array([75.13461], dtype=float32), array([71.10757], dtype=float32), array([70.68407], dtype=float32), array([71.094154], dtype=float32), array([74.22616], dtype=float32), array([67.42367], dtype=float32), array([73.918], dtype=float32), array([69.75447], dtype=float32), array([74.465645], dtype=float32), array([71.24991], dtype=float32), array([75.77996], dtype=float32), array([71.771065], dtype=float32), array([74.62171], dtype=float32), array([75.71964], dtype=float32), array([74.1141], dtype=float32), array([74.82323], dtype=float32), array([73.08349], dtype=float32), array([75.23961], dtype=float32), array([76.70989], dtype=float32), array([75.461586], dtype=float32), array([74.26103], dtype=float32), array([70.54926], dtype=float32), array([74.93645], dtype=float32), array([75.494644], dtype=float32), array([73.79565], dtype=float32), array([75.827385], dtype=float32), array([74.30707], dtype=float32), array([75.07834], dtype=float32), array([72.23936], dtype=float32), array([76.910194], dtype=float32), array([77.16536], dtype=float32), array([76.81031], dtype=float32), array([78.912415], dtype=float32), array([76.73478], dtype=float32), array([76.73629], dtype=float32), array([73.83188], dtype=float32), array([76.7677], dtype=float32), array([74.65575], dtype=float32), array([78.10895], dtype=float32), array([70.55342], dtype=float32), array([73.597404], dtype=float32), array([74.18454], dtype=float32), array([76.05118], dtype=float32), array([77.285095], dtype=float32), array([72.69285], dtype=float32), array([73.36075], dtype=float32), array([74.24361], dtype=float32), array([78.18797], dtype=float32), array([74.67359], dtype=float32), array([75.63587], dtype=float32), array([70.576515], dtype=float32), array([70.47141], dtype=float32), array([74.582184], dtype=float32), array([68.279724], dtype=float32), array([69.55959], dtype=float32), array([76.98656], dtype=float32), array([71.132164], dtype=float32), array([69.67704], dtype=float32), array([73.09536], dtype=float32), array([75.79949], dtype=float32), array([67.214806], dtype=float32), array([74.72961], dtype=float32), array([75.52266], dtype=float32), array([70.95762], dtype=float32), array([75.323586], dtype=float32), array([68.8573], dtype=float32), array([74.655655], dtype=float32), array([73.38203], dtype=float32), array([70.39413], dtype=float32), array([70.52093], dtype=float32), array([68.76059], dtype=float32), array([71.9945], dtype=float32), array([76.61353], dtype=float32), array([75.43955], dtype=float32), array([76.23089], dtype=float32), array([70.436386], dtype=float32), array([69.54964], dtype=float32), array([76.32456], dtype=float32), array([72.6953], dtype=float32), array([70.06113], dtype=float32), array([71.144356], dtype=float32), array([70.931305], dtype=float32), array([75.10113], dtype=float32), array([72.20249], dtype=float32), array([75.43813], dtype=float32), array([68.02856], dtype=float32), array([78.821144], dtype=float32), array([71.56316], dtype=float32), array([77.198616], dtype=float32), array([78.50647], dtype=float32), array([71.497856], dtype=float32), array([69.534546], dtype=float32), array([75.587204], dtype=float32), array([76.4824], dtype=float32), array([72.99287], dtype=float32), array([73.151306], dtype=float32), array([77.45773], dtype=float32), array([74.74576], dtype=float32), array([74.518135], dtype=float32), array([71.75706], dtype=float32), array([72.88829], dtype=float32), array([68.52996], dtype=float32), array([76.63364], dtype=float32), array([71.377014], dtype=float32), array([68.72864], dtype=float32), array([78.19719], dtype=float32), array([75.78096], dtype=float32), array([76.469376], dtype=float32), array([70.74153], dtype=float32), array([73.884224], dtype=float32), array([74.04288], dtype=float32), array([76.50461], dtype=float32), array([70.71385], dtype=float32), array([74.1422], dtype=float32), array([72.35727], dtype=float32), array([74.28327], dtype=float32), array([73.65319], dtype=float32), array([76.96511], dtype=float32), array([75.94578], dtype=float32), array([68.72342], dtype=float32), array([71.85229], dtype=float32), array([74.20839], dtype=float32), array([76.58853], dtype=float32), array([69.99302], dtype=float32), array([70.53326], dtype=float32), array([73.563095], dtype=float32), array([71.44372], dtype=float32), array([70.03214], dtype=float32), array([71.41204], dtype=float32), array([72.041145], dtype=float32), array([75.16736], dtype=float32), array([75.21819], dtype=float32), array([72.58468], dtype=float32), array([70.9419], dtype=float32), array([70.75147], dtype=float32), array([74.894554], dtype=float32), array([75.31465], dtype=float32), array([73.061165], dtype=float32), array([73.21687], dtype=float32), array([71.22898], dtype=float32), array([68.81812], dtype=float32), array([71.9942], dtype=float32), array([70.93202], dtype=float32), array([75.16275], dtype=float32), array([72.24886], dtype=float32), array([71.605965], dtype=float32), array([76.99666], dtype=float32), array([68.97197], dtype=float32), array([72.65466], dtype=float32), array([69.687126], dtype=float32), array([69.345474], dtype=float32), array([74.67702], dtype=float32), array([72.71221], dtype=float32), array([75.5828], dtype=float32), array([69.03229], dtype=float32), array([72.20045], dtype=float32), array([74.94602], dtype=float32), array([71.843254], dtype=float32), array([74.15018], dtype=float32), array([78.281624], dtype=float32), array([75.024345], dtype=float32), array([69.898735], dtype=float32), array([73.26081], dtype=float32), array([73.82048], dtype=float32), array([75.045], dtype=float32), array([69.72357], dtype=float32), array([75.26013], dtype=float32), array([73.56936], dtype=float32), array([73.00891], dtype=float32), array([68.543594], dtype=float32), array([77.1631], dtype=float32), array([72.27581], dtype=float32), array([70.12612], dtype=float32), array([75.26497], dtype=float32), array([70.603004], dtype=float32), array([75.23972], dtype=float32), array([74.94192], dtype=float32), array([71.00206], dtype=float32), array([75.78386], dtype=float32), array([73.403694], dtype=float32), array([71.624886], dtype=float32), array([74.58264], dtype=float32), array([69.02965], dtype=float32), array([74.675415], dtype=float32), array([76.151596], dtype=float32), array([76.70147], dtype=float32), array([72.171486], dtype=float32), array([75.92341], dtype=float32), array([72.12343], dtype=float32), array([75.75449], dtype=float32), array([76.72485], dtype=float32), array([69.41144], dtype=float32), array([71.32658], dtype=float32), array([75.06536], dtype=float32), array([75.270676], dtype=float32), array([72.22786], dtype=float32), array([75.9676], dtype=float32), array([70.12766], dtype=float32), array([74.50293], dtype=float32), array([76.08437], dtype=float32), array([70.0152], dtype=float32), array([72.31246], dtype=float32), array([67.836784], dtype=float32), array([76.16836], dtype=float32), array([73.26874], dtype=float32), array([70.22175], dtype=float32), array([71.46099], dtype=float32), array([72.18633], dtype=float32), array([74.84993], dtype=float32), array([74.50166], dtype=float32), array([71.02439], dtype=float32), array([75.759895], dtype=float32), array([73.47396], dtype=float32), array([70.19844], dtype=float32), array([74.92806], dtype=float32), array([72.41567], dtype=float32), array([74.48071], dtype=float32), array([71.069565], dtype=float32), array([70.050545], dtype=float32), array([68.21771], dtype=float32), array([77.65959], dtype=float32), array([73.52511], dtype=float32), array([74.21602], dtype=float32), array([73.32844], dtype=float32), array([69.45921], dtype=float32), array([69.93488], dtype=float32), array([75.00642], dtype=float32), array([73.93391], dtype=float32), array([72.28015], dtype=float32), array([74.8664], dtype=float32), array([72.788666], dtype=float32), array([71.31814], dtype=float32), array([71.512505], dtype=float32), array([69.44467], dtype=float32), array([74.12471], dtype=float32), array([71.12231], dtype=float32), array([72.60042], dtype=float32), array([74.09148], dtype=float32), array([74.45257], dtype=float32), array([70.97691], dtype=float32), array([70.95447], dtype=float32), array([73.15098], dtype=float32), array([70.79491], dtype=float32), array([68.9722], dtype=float32), array([74.422], dtype=float32), array([74.32799], dtype=float32), array([69.94883], dtype=float32), array([70.98763], dtype=float32), array([75.034386], dtype=float32), array([72.72849], dtype=float32), array([77.073044], dtype=float32), array([74.70342], dtype=float32), array([77.016396], dtype=float32), array([71.87568], dtype=float32), array([69.22161], dtype=float32), array([74.7018], dtype=float32), array([69.19415], dtype=float32), array([72.934975], dtype=float32), array([72.95732], dtype=float32), array([69.70003], dtype=float32), array([70.29707], dtype=float32), array([70.25243], dtype=float32), array([70.102104], dtype=float32), array([67.15722], dtype=float32), array([72.63686], dtype=float32), array([69.483925], dtype=float32), array([70.21476], dtype=float32), array([67.29482], dtype=float32), array([66.1455], dtype=float32), array([73.23035], dtype=float32), array([68.950615], dtype=float32), array([70.234375], dtype=float32), array([69.29911], dtype=float32), array([69.07763], dtype=float32), array([67.728096], dtype=float32), array([67.068855], dtype=float32), array([67.356316], dtype=float32), array([71.639534], dtype=float32), array([69.32852], dtype=float32), array([73.99111], dtype=float32), array([73.76415], dtype=float32), array([67.38672], dtype=float32), array([71.83867], dtype=float32), array([72.6925], dtype=float32), array([70.08596], dtype=float32), array([67.16192], dtype=float32), array([69.946846], dtype=float32), array([70.99029], dtype=float32), array([66.94394], dtype=float32), array([73.69209], dtype=float32), array([72.51954], dtype=float32), array([68.61946], dtype=float32), array([71.91326], dtype=float32), array([69.8877], dtype=float32), array([67.37527], dtype=float32), array([69.09073], dtype=float32), array([70.19155], dtype=float32), array([72.52848], dtype=float32), array([66.581696], dtype=float32), array([73.993], dtype=float32), array([73.98455], dtype=float32), array([72.10679], dtype=float32), array([66.58923], dtype=float32), array([70.59559], dtype=float32), array([76.102425], dtype=float32), array([74.964226], dtype=float32), array([75.58293], dtype=float32), array([70.64988], dtype=float32), array([66.60662], dtype=float32), array([73.03301], dtype=float32), array([79.195305], dtype=float32), array([66.29131], dtype=float32), array([75.0429], dtype=float32), array([70.29621], dtype=float32), array([75.267654], dtype=float32), array([74.20243], dtype=float32), array([68.7819], dtype=float32), array([78.40919], dtype=float32), array([71.322334], dtype=float32), array([73.527275], dtype=float32), array([74.05103], dtype=float32), array([76.44233], dtype=float32), array([76.82919], dtype=float32), array([71.22351], dtype=float32), array([71.817795], dtype=float32), array([69.94636], dtype=float32), array([73.478874], dtype=float32), array([71.136856], dtype=float32), array([71.160866], dtype=float32), array([76.82166], dtype=float32), array([72.30909], dtype=float32), array([71.340065], dtype=float32), array([76.56405], dtype=float32), array([73.38454], dtype=float32), array([76.35614], dtype=float32), array([74.32835], dtype=float32), array([71.96255], dtype=float32), array([69.81596], dtype=float32), array([73.26087], dtype=float32), array([72.14945], dtype=float32), array([73.30089], dtype=float32), array([71.958046], dtype=float32), array([74.29436], dtype=float32), array([73.62906], dtype=float32), array([69.423706], dtype=float32), array([71.541115], dtype=float32), array([71.75278], dtype=float32), array([75.39129], dtype=float32), array([68.315674], dtype=float32), array([69.42871], dtype=float32), array([77.10049], dtype=float32), array([72.25526], dtype=float32), array([71.301056], dtype=float32), array([70.45611], dtype=float32), array([72.34619], dtype=float32), array([71.610886], dtype=float32), array([71.96173], dtype=float32), array([74.219894], dtype=float32), array([70.818794], dtype=float32), array([73.0229], dtype=float32), array([70.77433], dtype=float32), array([73.93234], dtype=float32), array([75.31379], dtype=float32), array([72.76337], dtype=float32), array([73.06425], dtype=float32), array([74.472275], dtype=float32), array([70.202644], dtype=float32), array([70.715675], dtype=float32), array([73.76986], dtype=float32), array([69.7153], dtype=float32), array([70.994705], dtype=float32), array([72.883156], dtype=float32), array([72.26401], dtype=float32), array([69.007675], dtype=float32), array([74.919556], dtype=float32), array([73.92393], dtype=float32), array([71.78031], dtype=float32), array([72.41509], dtype=float32), array([70.516815], dtype=float32), array([74.149315], dtype=float32), array([72.13111], dtype=float32), array([74.624466], dtype=float32), array([69.75407], dtype=float32), array([70.735916], dtype=float32), array([73.384], dtype=float32), array([70.972046], dtype=float32), array([75.66068], dtype=float32), array([74.517395], dtype=float32), array([71.937904], dtype=float32), array([75.77446], dtype=float32), array([77.58368], dtype=float32), array([69.792854], dtype=float32), array([70.854095], dtype=float32), array([71.93453], dtype=float32), array([72.06086], dtype=float32), array([70.957504], dtype=float32), array([71.70045], dtype=float32), array([71.71031], dtype=float32), array([76.21415], dtype=float32), array([70.731445], dtype=float32), array([77.4446], dtype=float32), array([70.671455], dtype=float32), array([72.84841], dtype=float32), array([74.94881], dtype=float32), array([69.84896], dtype=float32), array([73.1325], dtype=float32), array([71.953316], dtype=float32), array([73.224785], dtype=float32), array([67.986824], dtype=float32), array([70.60756], dtype=float32), array([75.529594], dtype=float32), array([73.280975], dtype=float32), array([73.36197], dtype=float32), array([69.36884], dtype=float32), array([71.75422], dtype=float32), array([76.21568], dtype=float32), array([74.277054], dtype=float32), array([70.47024], dtype=float32), array([70.1465], dtype=float32), array([72.64498], dtype=float32), array([72.103035], dtype=float32), array([73.02015], dtype=float32), array([70.382645], dtype=float32), array([71.47775], dtype=float32), array([70.64781], dtype=float32), array([72.77196], dtype=float32), array([65.65708], dtype=float32), array([70.042366], dtype=float32), array([69.74203], dtype=float32), array([74.12988], dtype=float32), array([73.125244], dtype=float32), array([68.49153], dtype=float32), array([75.21372], dtype=float32), array([73.61583], dtype=float32), array([73.93563], dtype=float32), array([68.6298], dtype=float32), array([73.27774], dtype=float32), array([73.15114], dtype=float32), array([71.67247], dtype=float32), array([72.30109], dtype=float32), array([76.02642], dtype=float32), array([75.04542], dtype=float32), array([67.47545], dtype=float32), array([70.97966], dtype=float32), array([67.18197], dtype=float32), array([72.46832], dtype=float32), array([70.225655], dtype=float32), array([75.055435], dtype=float32), array([71.852516], dtype=float32), array([75.746925], dtype=float32), array([72.89656], dtype=float32), array([72.585396], dtype=float32), array([75.23945], dtype=float32), array([66.63235], dtype=float32), array([73.313446], dtype=float32), array([70.94441], dtype=float32), array([67.3657], dtype=float32), array([68.88915], dtype=float32), array([73.10054], dtype=float32), array([70.64452], dtype=float32), array([74.029564], dtype=float32), array([69.33913], dtype=float32), array([69.682076], dtype=float32), array([75.53972], dtype=float32), array([74.549385], dtype=float32), array([68.93554], dtype=float32), array([73.02432], dtype=float32), array([65.59662], dtype=float32), array([68.08054], dtype=float32), array([74.15356], dtype=float32), array([76.44561], dtype=float32), array([69.67846], dtype=float32), array([70.9127], dtype=float32), array([74.38276], dtype=float32), array([68.9021], dtype=float32), array([74.558525], dtype=float32), array([75.239525], dtype=float32), array([67.34628], dtype=float32), array([75.01246], dtype=float32), array([72.85404], dtype=float32), array([66.147545], dtype=float32), array([65.69752], dtype=float32), array([74.61945], dtype=float32), array([69.09855], dtype=float32), array([71.16235], dtype=float32), array([72.79703], dtype=float32), array([72.423], dtype=float32), array([72.20399], dtype=float32), array([73.89054], dtype=float32), array([72.14682], dtype=float32), array([74.662], dtype=float32), array([72.0597], dtype=float32), array([71.98827], dtype=float32), array([75.55767], dtype=float32), array([75.67652], dtype=float32), array([78.13206], dtype=float32), array([74.95695], dtype=float32), array([74.70659], dtype=float32), array([74.41632], dtype=float32), array([74.38952], dtype=float32), array([72.99407], dtype=float32), array([74.214745], dtype=float32), array([74.871735], dtype=float32), array([77.71307], dtype=float32), array([73.45014], dtype=float32), array([72.71832], dtype=float32), array([74.795494], dtype=float32), array([73.29119], dtype=float32), array([72.4328], dtype=float32), array([72.81834], dtype=float32), array([70.463104], dtype=float32), array([73.22294], dtype=float32), array([71.0319], dtype=float32), array([75.89251], dtype=float32), array([76.47886], dtype=float32), array([75.021645], dtype=float32), array([71.50337], dtype=float32), array([70.08978], dtype=float32), array([78.89808], dtype=float32), array([75.63402], dtype=float32), array([75.49151], dtype=float32), array([71.39299], dtype=float32), array([71.99269], dtype=float32), array([74.46447], dtype=float32), array([74.25378], dtype=float32), array([71.09719], dtype=float32), array([74.87899], dtype=float32), array([71.91548], dtype=float32), array([70.225], dtype=float32), array([69.03411], dtype=float32), array([71.68955], dtype=float32), array([74.34295], dtype=float32), array([70.65151], dtype=float32), array([77.24611], dtype=float32), array([77.1333], dtype=float32), array([70.48575], dtype=float32), array([73.04901], dtype=float32), array([69.81669], dtype=float32), array([70.871605], dtype=float32), array([74.574486], dtype=float32), array([72.983025], dtype=float32), array([74.13499], dtype=float32), array([67.994774], dtype=float32), array([74.50126], dtype=float32), array([69.43082], dtype=float32), array([69.907], dtype=float32), array([76.91552], dtype=float32), array([74.747345], dtype=float32), array([70.48619], dtype=float32), array([76.87261], dtype=float32), array([73.51599], dtype=float32), array([74.52867], dtype=float32), array([76.15699], dtype=float32), array([69.6507], dtype=float32), array([76.81955], dtype=float32), array([69.208466], dtype=float32), array([69.24873], dtype=float32), array([76.41664], dtype=float32), array([69.99646], dtype=float32), array([71.166725], dtype=float32), array([69.37915], dtype=float32), array([68.32955], dtype=float32), array([74.4931], dtype=float32), array([77.11674], dtype=float32), array([69.20837], dtype=float32), array([69.99012], dtype=float32), array([72.20895], dtype=float32), array([70.73095], dtype=float32), array([70.34075], dtype=float32), array([70.6086], dtype=float32), array([73.43742], dtype=float32), array([74.37725], dtype=float32), array([75.745445], dtype=float32), array([75.78159], dtype=float32), array([74.57627], dtype=float32), array([72.00796], dtype=float32), array([73.82698], dtype=float32), array([69.53107], dtype=float32), array([71.78284], dtype=float32), array([74.98196], dtype=float32), array([73.375916], dtype=float32), array([75.15601], dtype=float32), array([69.6291], dtype=float32), array([68.204285], dtype=float32), array([68.57272], dtype=float32), array([72.26042], dtype=float32), array([69.69526], dtype=float32), array([74.06513], dtype=float32), array([74.770744], dtype=float32), array([70.18837], dtype=float32), array([74.73155], dtype=float32), array([75.0114], dtype=float32), array([76.65325], dtype=float32), array([71.801414], dtype=float32), array([73.99058], dtype=float32), array([71.52052], dtype=float32), array([70.39127], dtype=float32), array([72.787636], dtype=float32), array([73.37484], dtype=float32), array([76.92907], dtype=float32), array([72.03455], dtype=float32), array([74.97294], dtype=float32), array([70.66279], dtype=float32), array([73.41023], dtype=float32), array([70.3338], dtype=float32), array([70.866974], dtype=float32), array([75.311966], dtype=float32), array([73.06116], dtype=float32), array([76.49547], dtype=float32), array([75.808075], dtype=float32), array([74.32273], dtype=float32), array([71.37369], dtype=float32), array([70.45851], dtype=float32), array([75.07794], dtype=float32), array([72.99307], dtype=float32), array([74.68394], dtype=float32), array([72.63975], dtype=float32), array([71.13087], dtype=float32), array([75.63234], dtype=float32), array([77.33802], dtype=float32), array([72.208565], dtype=float32), array([74.17443], dtype=float32), array([72.38355], dtype=float32), array([72.95929], dtype=float32), array([75.36131], dtype=float32), array([71.35211], dtype=float32), array([72.400444], dtype=float32), array([74.50266], dtype=float32), array([73.93683], dtype=float32), array([73.34714], dtype=float32), array([73.54857], dtype=float32), array([75.49533], dtype=float32), array([69.531784], dtype=float32), array([69.847176], dtype=float32), array([74.04847], dtype=float32), array([72.38313], dtype=float32), array([71.61311], dtype=float32), array([69.924164], dtype=float32), array([73.50463], dtype=float32), array([72.644356], dtype=float32), array([69.84523], dtype=float32), array([76.303635], dtype=float32), array([76.273766], dtype=float32), array([69.5616], dtype=float32), array([67.5265], dtype=float32), array([73.31319], dtype=float32)]\n","[70 73 77 71 74 75 73 75 73 71 75 71 71 76 70 73 77 69 70 73 77 76 69 72\n"," 70 77 71 69 75 75 74 74 74 69 71 73 74 73 75 72 73 74 72 75 73 75 76 77\n"," 72 72 71 74 73 73 71 73 73 74 69 70 73 73 74 74 75 68 76 75 70 70 77 73\n"," 70 73 77 76 70 75 75 72 72 73 70 70 72 75 69 70 68 70 76 76 70 73 73 70\n"," 70 72 72 68 69 68 75 71 72 70 75 68 74 69 72 71 69 70 74 70 71 75 69 74\n"," 71 73 74 75 78 73 74 76 73 74 77 76 73 74 74 75 73 75 73 73 77 73 73 76\n"," 70 75 72 70 77 74 75 74 73 72 73 74 71 72 75 74 69 74 74 71 70 71 74 74\n"," 74 69 72 70 76 69 73 70 72 75 74 75 75 75 71 71 74 72 75 69 69 73 76 72\n"," 71 70 74 75 69 72 74 69 71 74 70 69 69 70 76 74 66 74 73 76 74 72 68 69\n"," 75 77 75 79 73 71 69 70 70 70 75 68 70 70 69 72 70 69 69 70 70 75 69 71\n"," 71 75 73 71 69 72 75 70 70 72 70 66 70 69 70 68 70 71 70 68 66 68 72 68\n"," 71 73 70 69 70 69 70 68 70 69 67 70 70 68 66 70 69 71 71 71 74 70 72 70\n"," 72 74 75 71 71 71 73 72 72 71 76 76 70 72 73 73 77 74 73 72 74 70 75 72\n"," 72 71 74 72 71 72 71 72 72 70 72 75 72 72 73 71 66 72 66 76 74 68 68 76\n"," 72 66 71 76 70 70 74 66 70 75 71 70 71 74 67 73 69 74 71 75 71 74 75 74\n"," 74 73 75 76 75 74 70 74 75 73 75 74 75 72 76 77 76 78 76 76 73 76 74 78\n"," 70 73 74 76 77 72 73 74 78 74 75 70 70 74 68 69 76 71 69 73 75 67 74 75\n"," 70 75 68 74 73 70 70 68 71 76 75 76 70 69 76 72 70 71 70 75 72 75 68 78\n"," 71 77 78 71 69 75 76 72 73 77 74 74 71 72 68 76 71 68 78 75 76 70 73 74\n"," 76 70 74 72 74 73 76 75 68 71 74 76 69 70 73 71 70 71 72 75 75 72 70 70\n"," 74 75 73 73 71 68 71 70 75 72 71 76 68 72 69 69 74 72 75 69 72 74 71 74\n"," 78 75 69 73 73 75 69 75 73 73 68 77 72 70 75 70 75 74 71 75 73 71 74 69\n"," 74 76 76 72 75 72 75 76 69 71 75 75 72 75 70 74 76 70 72 67 76 73 70 71\n"," 72 74 74 71 75 73 70 74 72 74 71 70 68 77 73 74 73 69 69 75 73 72 74 72\n"," 71 71 69 74 71 72 74 74 70 70 73 70 68 74 74 69 70 75 72 77 74 77 71 69\n"," 74 69 72 72 69 70 70 70 67 72 69 70 67 66 73 68 70 69 69 67 67 67 71 69\n"," 73 73 67 71 72 70 67 69 70 66 73 72 68 71 69 67 69 70 72 66 73 73 72 66\n"," 70 76 74 75 70 66 73 79 66 75 70 75 74 68 78 71 73 74 76 76 71 71 69 73\n"," 71 71 76 72 71 76 73 76 74 71 69 73 72 73 71 74 73 69 71 71 75 68 69 77\n"," 72 71 70 72 71 71 74 70 73 70 73 75 72 73 74 70 70 73 69 70 72 72 69 74\n"," 73 71 72 70 74 72 74 69 70 73 70 75 74 71 75 77 69 70 71 72 70 71 71 76\n"," 70 77 70 72 74 69 73 71 73 67 70 75 73 73 69 71 76 74 70 70 72 72 73 70\n"," 71 70 72 65 70 69 74 73 68 75 73 73 68 73 73 71 72 76 75 67 70 67 72 70\n"," 75 71 75 72 72 75 66 73 70 67 68 73 70 74 69 69 75 74 68 73 65 68 74 76\n"," 69 70 74 68 74 75 67 75 72 66 65 74 69 71 72 72 72 73 72 74 72 71 75 75\n"," 78 74 74 74 74 72 74 74 77 73 72 74 73 72 72 70 73 71 75 76 75 71 70 78\n"," 75 75 71 71 74 74 71 74 71 70 69 71 74 70 77 77 70 73 69 70 74 72 74 67\n"," 74 69 69 76 74 70 76 73 74 76 69 76 69 69 76 69 71 69 68 74 77 69 69 72\n"," 70 70 70 73 74 75 75 74 72 73 69 71 74 73 75 69 68 68 72 69 74 74 70 74\n"," 75 76 71 73 71 70 72 73 76 72 74 70 73 70 70 75 73 76 75 74 71 70 75 72\n"," 74 72 71 75 77 72 74 72 72 75 71 72 74 73 73 73 75 69 69 74 72 71 69 73\n"," 72 69 76 76 69 67 73]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DgIZbYka4VGP","colab_type":"code","outputId":"bc6c5c88-cc37-4af3-b157-70792fc29b83","executionInfo":{"status":"ok","timestamp":1574847560203,"user_tz":-60,"elapsed":1228,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}},"colab":{"base_uri":"https://localhost:8080/","height":262}},"source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","plt.style.use('seaborn-whitegrid')\n","import numpy as np\n","\n","plt.errorbar(real_label, predicted_label,  fmt='.k');"],"execution_count":29,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"tTocjNDXOus7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":310},"outputId":"0d318824-04b0-4344-bf6f-5d56bca26bff","executionInfo":{"status":"ok","timestamp":1574847624579,"user_tz":-60,"elapsed":1320,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}}},"source":["import numpy as np\n","import pandas as pd\n","\n","'''real_label, predicted_label'''\n","\n","print(type(real_label))\n","\n","df = pd.DataFrame({'REAL': np.asarray(real_label), 'PREDICTED':np.asarray(predicted_label)})\n","df.plot('REAL', 'PREDICTED', kind='scatter')"],"execution_count":31,"outputs":[{"output_type":"stream","text":["<class 'list'>\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f8a2b403128>"]},"metadata":{"tags":[]},"execution_count":31},{"output_type":"display_data","data":{"image/png":"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\nQRCEgvn/fE67NX1FCPsAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"BKsr0DoxO-Uw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":686},"outputId":"7b2fa067-992e-43a8-c833-2ebb2ff83e2a","executionInfo":{"status":"ok","timestamp":1574847641585,"user_tz":-60,"elapsed":1152,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}}},"source":["#See unique real values \n","print(df.PREDICTED.unique())\n","\n","#Check the average value of the predicted labels\n","df.groupby('REAL').mean()"],"execution_count":32,"outputs":[{"output_type":"stream","text":["[70 73 77 71 74 75 76 69 72 68 78 66 79 67 65]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PREDICTED</th>\n","    </tr>\n","    <tr>\n","      <th>REAL</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>53.0</th>\n","      <td>69.542857</td>\n","    </tr>\n","    <tr>\n","      <th>56.0</th>\n","      <td>72.383838</td>\n","    </tr>\n","    <tr>\n","      <th>57.0</th>\n","      <td>72.576271</td>\n","    </tr>\n","    <tr>\n","      <th>64.0</th>\n","      <td>71.838235</td>\n","    </tr>\n","    <tr>\n","      <th>65.0</th>\n","      <td>72.060000</td>\n","    </tr>\n","    <tr>\n","      <th>66.0</th>\n","      <td>71.852941</td>\n","    </tr>\n","    <tr>\n","      <th>67.0</th>\n","      <td>72.578947</td>\n","    </tr>\n","    <tr>\n","      <th>69.0</th>\n","      <td>72.869565</td>\n","    </tr>\n","    <tr>\n","      <th>70.0</th>\n","      <td>72.021583</td>\n","    </tr>\n","    <tr>\n","      <th>71.0</th>\n","      <td>72.857143</td>\n","    </tr>\n","    <tr>\n","      <th>72.0</th>\n","      <td>71.647059</td>\n","    </tr>\n","    <tr>\n","      <th>73.0</th>\n","      <td>69.577778</td>\n","    </tr>\n","    <tr>\n","      <th>74.0</th>\n","      <td>72.150000</td>\n","    </tr>\n","    <tr>\n","      <th>75.0</th>\n","      <td>74.578947</td>\n","    </tr>\n","    <tr>\n","      <th>78.0</th>\n","      <td>71.608108</td>\n","    </tr>\n","    <tr>\n","      <th>81.0</th>\n","      <td>73.391304</td>\n","    </tr>\n","    <tr>\n","      <th>83.0</th>\n","      <td>72.935484</td>\n","    </tr>\n","    <tr>\n","      <th>92.0</th>\n","      <td>73.868421</td>\n","    </tr>\n","    <tr>\n","      <th>100.0</th>\n","      <td>73.269231</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PREDICTED\n","REAL            \n","53.0   69.542857\n","56.0   72.383838\n","57.0   72.576271\n","64.0   71.838235\n","65.0   72.060000\n","66.0   71.852941\n","67.0   72.578947\n","69.0   72.869565\n","70.0   72.021583\n","71.0   72.857143\n","72.0   71.647059\n","73.0   69.577778\n","74.0   72.150000\n","75.0   74.578947\n","78.0   71.608108\n","81.0   73.391304\n","83.0   72.935484\n","92.0   73.868421\n","100.0  73.269231"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"_qoh6FYOPEpp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":723},"outputId":"53864fe9-ae90-44e6-ad52-c75876e7a039","executionInfo":{"status":"ok","timestamp":1574847668146,"user_tz":-60,"elapsed":1074,"user":{"displayName":"Filippo Tessaro","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDDjBrLjswtyZ4p28Vo67M9H4UcnX66HmXFNf6J=s64","userId":"12902594735929592197"}}},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.metrics import r2_score, mean_squared_error\n","\n","def r2_rmse( g ):\n","    r2 = r2_score( g.REAL, g.PREDICTED)\n","    count = len(g.REAL)\n","    mse = mean_squared_error( g['REAL'], g['PREDICTED'] ) \n","    rmse = np.sqrt( mean_squared_error( g['REAL'], g['PREDICTED'] ) ) \n","    return pd.Series( dict( count = int(count), r2 = r2, rmse = rmse, mse = mse ) )\n","\n","print(\"Global:\", r2_rmse(df))\n","\n","#Statistics over REAL value\n","df.groupby( 'REAL' ).apply( r2_rmse ).reset_index()"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Global: count    991.000000\n","r2        -0.068659\n","rmse      10.478415\n","mse      109.797175\n","dtype: float64\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>REAL</th>\n","      <th>count</th>\n","      <th>r2</th>\n","      <th>rmse</th>\n","      <th>mse</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>53.0</td>\n","      <td>35.0</td>\n","      <td>0.0</td>\n","      <td>16.651898</td>\n","      <td>277.285714</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>56.0</td>\n","      <td>99.0</td>\n","      <td>0.0</td>\n","      <td>16.606558</td>\n","      <td>275.777778</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>57.0</td>\n","      <td>59.0</td>\n","      <td>0.0</td>\n","      <td>15.825853</td>\n","      <td>250.457627</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>64.0</td>\n","      <td>68.0</td>\n","      <td>0.0</td>\n","      <td>8.159260</td>\n","      <td>66.573529</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>65.0</td>\n","      <td>100.0</td>\n","      <td>0.0</td>\n","      <td>7.500667</td>\n","      <td>56.260000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>66.0</td>\n","      <td>68.0</td>\n","      <td>0.0</td>\n","      <td>6.287242</td>\n","      <td>39.529412</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>67.0</td>\n","      <td>19.0</td>\n","      <td>0.0</td>\n","      <td>6.529286</td>\n","      <td>42.631579</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>69.0</td>\n","      <td>23.0</td>\n","      <td>0.0</td>\n","      <td>4.592054</td>\n","      <td>21.086957</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>70.0</td>\n","      <td>139.0</td>\n","      <td>0.0</td>\n","      <td>3.286116</td>\n","      <td>10.798561</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>71.0</td>\n","      <td>35.0</td>\n","      <td>0.0</td>\n","      <td>3.166792</td>\n","      <td>10.028571</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>72.0</td>\n","      <td>51.0</td>\n","      <td>0.0</td>\n","      <td>2.612189</td>\n","      <td>6.823529</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>73.0</td>\n","      <td>45.0</td>\n","      <td>0.0</td>\n","      <td>4.044200</td>\n","      <td>16.355556</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>74.0</td>\n","      <td>20.0</td>\n","      <td>0.0</td>\n","      <td>2.941088</td>\n","      <td>8.650000</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>75.0</td>\n","      <td>38.0</td>\n","      <td>0.0</td>\n","      <td>1.919430</td>\n","      <td>3.684211</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>78.0</td>\n","      <td>74.0</td>\n","      <td>0.0</td>\n","      <td>6.985506</td>\n","      <td>48.797297</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>81.0</td>\n","      <td>23.0</td>\n","      <td>0.0</td>\n","      <td>7.748773</td>\n","      <td>60.043478</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>83.0</td>\n","      <td>31.0</td>\n","      <td>0.0</td>\n","      <td>10.429487</td>\n","      <td>108.774194</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>92.0</td>\n","      <td>38.0</td>\n","      <td>0.0</td>\n","      <td>18.224477</td>\n","      <td>332.131579</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>100.0</td>\n","      <td>26.0</td>\n","      <td>0.0</td>\n","      <td>26.786190</td>\n","      <td>717.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     REAL  count   r2       rmse         mse\n","0    53.0   35.0  0.0  16.651898  277.285714\n","1    56.0   99.0  0.0  16.606558  275.777778\n","2    57.0   59.0  0.0  15.825853  250.457627\n","3    64.0   68.0  0.0   8.159260   66.573529\n","4    65.0  100.0  0.0   7.500667   56.260000\n","5    66.0   68.0  0.0   6.287242   39.529412\n","6    67.0   19.0  0.0   6.529286   42.631579\n","7    69.0   23.0  0.0   4.592054   21.086957\n","8    70.0  139.0  0.0   3.286116   10.798561\n","9    71.0   35.0  0.0   3.166792   10.028571\n","10   72.0   51.0  0.0   2.612189    6.823529\n","11   73.0   45.0  0.0   4.044200   16.355556\n","12   74.0   20.0  0.0   2.941088    8.650000\n","13   75.0   38.0  0.0   1.919430    3.684211\n","14   78.0   74.0  0.0   6.985506   48.797297\n","15   81.0   23.0  0.0   7.748773   60.043478\n","16   83.0   31.0  0.0  10.429487  108.774194\n","17   92.0   38.0  0.0  18.224477  332.131579\n","18  100.0   26.0  0.0  26.786190  717.500000"]},"metadata":{"tags":[]},"execution_count":33}]}]}